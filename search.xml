<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>markdown书写格式</title>
    <url>/2021/03/27/Markdown%E6%A0%BC%E5%BC%8F/</url>
    <content><![CDATA[<blockquote>
<p>本文主要介绍写博客使用Typora书写Markdown格式文章时所需要的技巧！</p>
</blockquote>
<p><em><span id="more"></span></em></p>
<h1 id="标题"><a class="markdownIt-Anchor" href="#标题"></a> 标题</h1>
<p>使用 <strong>#</strong> 号可表示 1-6 级标题，一级标题对应一个 <strong>#</strong> 号，二级标题对应两个 <strong>#</strong> 号，依此类推：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 一级标题 #           /#前后各有一个空格/</span><br><span class="line">## 二级标题 ##</span><br><span class="line">### 三级标题 ###</span><br><span class="line">……</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<h2 id="二级标题"><a class="markdownIt-Anchor" href="#二级标题"></a> 二级标题</h2>
<h1 id="字体"><a class="markdownIt-Anchor" href="#字体"></a> 字体</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">*斜体*          		  <span class="comment">/*前后无空格/</span></span><br><span class="line"><span class="comment">**粗体**				  </span></span><br><span class="line"><span class="comment">***粗斜体***   	     </span></span><br><span class="line"><span class="comment">~~删除线~~  			 </span></span><br><span class="line"><span class="comment">&lt;u&gt;下划线&lt;/u&gt;           </span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>​		<em>斜体</em></p>
<p>​		<strong>粗体</strong></p>
<p>​		<em><strong>粗斜体</strong></em></p>
<p>​		<s>删除线</s></p>
<p>​		<u>下划线</u></p>
<h1 id="分隔线"><a class="markdownIt-Anchor" href="#分隔线"></a> 分隔线</h1>
<p>一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西也可以在星号或是减号中间插入空格:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">***</span><br><span class="line"></span><br><span class="line">* * *</span><br><span class="line"></span><br><span class="line">*****</span><br><span class="line"></span><br><span class="line">- - -</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<hr>
<hr>
<h1 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h1>
<h2 id="无序列表"><a class="markdownIt-Anchor" href="#无序列表"></a> 无序列表</h2>
<p>无序列表使用星号(<em><strong><strong>)、加号(</strong>+</strong>)或是减号(</em><em>-</em>*)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">* 第二项</span><br><span class="line">* 第三项</span><br><span class="line"></span><br><span class="line">+ 第一项</span><br><span class="line">+ 第二项</span><br><span class="line">+ 第三项</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 第一项</span><br><span class="line">- 第二项</span><br><span class="line">- 第三项</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
<h2 id="有序列表"><a class="markdownIt-Anchor" href="#有序列表"></a> 有序列表</h2>
<p>有序列表使用数字并加上 <strong>.</strong> 号来表示,后面也得跟一个空格，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 第一项</span><br><span class="line"><span class="number">2.</span> 第二项</span><br><span class="line"><span class="number">3.</span> 第三项</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ol>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ol>
<h2 id="列表嵌套"><a class="markdownIt-Anchor" href="#列表嵌套"></a> 列表嵌套</h2>
<p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line"><span class="number">2.</span> 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ol>
<li>第一项：
<ul>
<li>第一项嵌套的第一个元素</li>
<li>第一项嵌套的第二个元素</li>
</ul>
</li>
<li>第二项：
<ul>
<li>第二项嵌套的第一个元素</li>
<li>第二项嵌套的第二个元素</li>
</ul>
</li>
</ol>
<h1 id="区块"><a class="markdownIt-Anchor" href="#区块"></a> 区块</h1>
<ol>
<li>区块的使用</li>
</ol>
<p>区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt; 这是一个区块引用</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<blockquote>
<p><strong>这是一个区块引用</strong></p>
</blockquote>
<p>另外区块是可以嵌套的，一个 <strong>&gt;</strong> 符号是最外层，两个 <strong>&gt;</strong> 符号是第一层嵌套，以此类推：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt; 最外层</span><br><span class="line">&gt; &gt; 第一层嵌套</span><br><span class="line">&gt; &gt; &gt; 第二层嵌套</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<blockquote>
<p>最外层</p>
<blockquote>
<p>第一层嵌套</p>
<blockquote>
<p>第二层嵌套</p>
</blockquote>
</blockquote>
</blockquote>
<ol start="2">
<li>区块中使用列表</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt; 区块中使用列表</span><br><span class="line">&gt; <span class="number">1.</span> 第一项</span><br><span class="line">&gt; <span class="number">2.</span> 第二项</span><br><span class="line">&gt; + 第一项</span><br><span class="line">&gt; + 第二项</span><br><span class="line">&gt; + 第三项 </span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<blockquote>
<p>区块中使用列表</p>
<ol>
<li>第一项</li>
<li>第二项</li>
</ol>
<ul>
<li>第一项</li>
<li>第二项</li>
<li>第三项</li>
</ul>
</blockquote>
<ol start="3">
<li>列表中使用区块</li>
</ol>
<p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">* 第一项</span><br><span class="line">    &gt; 列表中使用区块</span><br><span class="line">* 第二项</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>
<p>第一项</p>
<blockquote>
<p>列表中使用区块</p>
</blockquote>
</li>
<li>
<p>第二项</p>
</li>
</ul>
<h1 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h1>
<ol>
<li>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（<strong>`</strong>）：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">`printf()` 函数</span><br></pre></td></tr></table></figure>
<p>效果如下:</p>
<p>​	<code>printf()</code> 函数</p>
<ol start="2">
<li>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">	printf(<span class="string">"hello world!"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>{</span><br><span class="line">	printf(<span class="string">"hello world!"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>使用**```** 包裹一段代码，并指定一种语言（也可以不指定）</li>
</ol>
<h1 id="链接"><a class="markdownIt-Anchor" href="#链接"></a> 链接</h1>
<ol>
<li>链接使用方法：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[链接名称](链接地址)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br><span class="line"></span><br><span class="line">例：Markdown学习文档来自 [菜鸟教程](https:<span class="comment">//www.runoob.com)</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>Markdown学习文档来自 <a href="https://www.runoob.com">菜鸟教程</a></p>
<ol start="2">
<li>可以通过变量来设置一个链接，变量赋值在文档末尾进行：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这个链接用 <span class="number">1</span> 作为网址变量 [Google][<span class="number">1</span>]</span><br><span class="line">这个链接用 runoob 作为网址变量 [Runoob][runoob]</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">  [<span class="number">1</span>]: http:<span class="comment">//www.google.com/</span></span><br><span class="line">  [runoob]: http:<span class="comment">//www.runoob.com/</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>
这个链接用 runoob 作为网址变量 <a href="http://www.runoob.com/">Runoob</a><br>
然后在文档的结尾为变量赋值（网址）</p>
<h1 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h1>
<ol>
<li>图片使用格式</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![alt 属性文本](图片地址/网址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址/网址 <span class="string">"可选标题"</span>)</span><br></pre></td></tr></table></figure>
<p>开头一个感叹号 （!）， 接着一个方括号，里面放上图片的替代文字接着一个普通括号，里面放上图片的地址/网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![截图](图片地址)</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://qiniu.teksab.cn/img/Markdown%E5%9B%BE%E7%89%87%E6%BC%94%E7%A4%BA1.jpg" alt="Markdown图片演示1"></p>
<ol start="2">
<li>可以像网址那样对图片网址使用变量:</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">这个链接用 <span class="number">1</span> 作为网址变量 [RUNOOB][<span class="number">1</span>].</span><br><span class="line">然后在文档的结尾为变量赋值（网址）</span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>]: http:<span class="comment">//static.runoob.com/images/runoob-logo.png</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">RUNOOB</a>.<br>
然后在文档的结尾为变量赋值（网址）</p>
<ol start="3">
<li>图片链接</li>
</ol>
<p>给图片增加链接，将图像的Markdown 括在方括号中，然后将图片需要链接的网址添加在圆括号中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[![截图](图片地址)](链接)</span><br></pre></td></tr></table></figure>
<p><a href="https://markdown.com.cn/basic-syntax/images.html"><img src="http://qiniu.teksab.cn/img/Markdown%E5%9B%BE%E7%89%87%E6%BC%94%E7%A4%BA2.jpg" alt=""></a></p>
<h1 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h1>
<ol>
<li>表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">|  表头   | 表头  |</span><br><span class="line">|  ----  | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>表头</th>
<th>表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
<tr>
<td>单元格</td>
<td>单元格</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>可以设置表格的对齐方式：
<ul>
<li><strong>-:</strong> 设置内容和标题栏居右对齐。</li>
<li><strong>:-</strong> 设置内容和标题栏居左对齐。</li>
<li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:right">右对齐</th>
<th style="text-align:center">居中对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
<tr>
<td style="text-align:left">单元格</td>
<td style="text-align:right">单元格</td>
<td style="text-align:center">单元格</td>
</tr>
</tbody>
</table>
<h1 id="转义"><a class="markdownIt-Anchor" href="#转义"></a> 转义</h1>
<p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   下划线</span><br><span class="line">{}  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  小括号</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   感叹号</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>​	这是一个普通星号 <strong>*</strong></p>
<p>​	这是一个普通反斜杠 <strong>\</strong></p>
<h1 id="latex数学公式"><a class="markdownIt-Anchor" href="#latex数学公式"></a> LaTex数学公式</h1>
<p><strong>Typora</strong>使用 <strong>LaTex</strong> 语法来输入数学公式。<strong>Typora</strong> 的数学公式有两种：行中公式和独立公式。行中公式放在文中与其它文字混编，独立公式单独成行。</p>
<ol>
<li>行内公式</li>
</ol>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span>Latax<span class="built_in">$</span> 行内公式 </span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mi>a</mi><mi>t</mi><mi>a</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">Latax</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span></span></span></span> 行内公式</p>
<ol start="2">
<li>独立公式</li>
</ol>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">独立公式LaTex</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>L</mi><mi>a</mi><mi>T</mi><mi>e</mi><mi>x</mi><mi mathvariant="normal">独</mi><mi mathvariant="normal">立</mi><mi mathvariant="normal">公</mi><mi mathvariant="normal">式</mi></mrow><annotation encoding="application/x-tex">LaTex独立公式
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">L</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">独</span><span class="mord cjk_fallback">立</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">式</span></span></span></span></span></p>
<h2 id="设置符号间的间隔"><a class="markdownIt-Anchor" href="#设置符号间的间隔"></a> 设置符号间的间隔</h2>
<p><mark>空格键</mark>在LaTex中不起作用，需要使用命令来设置字符或符号间的间隔。**<code>%</code><strong>后为注释内容，</strong><code>\\</code>**表示换行。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">ab 			<span class="keyword">\\</span> <span class="comment">%无间隔</span></span><br><span class="line">a<span class="keyword">\,</span>b 		<span class="keyword">\\</span> <span class="comment">%小空格</span></span><br><span class="line">a<span class="keyword">\;</span>b 		<span class="keyword">\\</span> <span class="comment">%中空格</span></span><br><span class="line">a<span class="keyword">\ </span>b 		<span class="keyword">\\</span> <span class="comment">%大空格</span></span><br><span class="line">a<span class="keyword">\quad</span> b 	<span class="keyword">\\</span> <span class="comment">%真空格</span></span><br><span class="line">a<span class="keyword">\qquad</span> b 	   <span class="comment">%双真空格</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mi>b</mi><mspace linebreak="newline"></mspace><mi>a</mi><mtext> </mtext><mi>b</mi><mspace linebreak="newline"></mspace><mi>a</mi><mtext>  </mtext><mi>b</mi><mspace linebreak="newline"></mspace><mi>a</mi><mtext> </mtext><mi>b</mi><mspace linebreak="newline"></mspace><mi>a</mi><mspace width="1em"></mspace><mi>b</mi><mspace linebreak="newline"></mspace><mi>a</mi><mspace width="2em"></mspace><mi>b</mi></mrow><annotation encoding="application/x-tex">ab 			\\ %无间隔
a\,b 		\\ %小空格
a\;b 		\\ %中空格
a\ b 		\\ %大空格
a\quad b 	\\ %真空格
a\qquad b 	   %双真空格
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace"> </span><span class="mord mathdefault">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">b</span></span></span></span></span></p>
<hr>
<h2 id="基本数学符号"><a class="markdownIt-Anchor" href="#基本数学符号"></a> 基本数学符号</h2>
<p>包括上标、下标、根号、分式、括号(小括号，中括号，大括号)、省略号。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">e<span class="built_in">^</span>x,e<span class="built_in">^</span>{2x}   			<span class="keyword">\\</span> <span class="comment">%上标，多个上标使用{}</span></span><br><span class="line">x<span class="built_in">_</span>0,T<span class="built_in">_</span>1 				<span class="keyword">\\</span> <span class="comment">%下标</span></span><br><span class="line"><span class="keyword">\sqrt</span>{abc},<span class="keyword">\sqrt</span>[5]{abc}<span class="keyword">\\</span> <span class="comment">%根号,语法为\sqrt[n] 未给出n则默认为2</span></span><br><span class="line"><span class="keyword">\frac</span>{xyz}{lmn}			<span class="keyword">\\</span> <span class="comment">%分式</span></span><br><span class="line">()						<span class="keyword">\\</span> <span class="comment">%小括号</span></span><br><span class="line">[<span class="keyword">\quad</span> ]				<span class="keyword">\\</span> <span class="comment">%中括号</span></span><br><span class="line"><span class="keyword">\lbrace</span> <span class="keyword">\rbrace</span> 		<span class="keyword">\\</span> <span class="comment">%大括号</span></span><br><span class="line"><span class="keyword">\cdots</span>         			   <span class="comment">%省略号</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>e</mi><mi>x</mi></msup><mo separator="true">,</mo><msup><mi>e</mi><mrow><mn>2</mn><mi>x</mi></mrow></msup><mspace linebreak="newline"></mspace><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>T</mi><mn>1</mn></msub><mspace linebreak="newline"></mspace><msqrt><mrow><mi>a</mi><mi>b</mi><mi>c</mi></mrow></msqrt><mo separator="true">,</mo><mroot><mrow><mi>a</mi><mi>b</mi><mi>c</mi></mrow><mn>5</mn></mroot><mspace linebreak="newline"></mspace><mfrac><mrow><mi>x</mi><mi>y</mi><mi>z</mi></mrow><mrow><mi>l</mi><mi>m</mi><mi>n</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo stretchy="false">[</mo><mo stretchy="false">]</mo><mspace linebreak="newline"></mspace><mo stretchy="false">{</mo><mo stretchy="false">}</mo><mspace linebreak="newline"></mspace><mo>⋯</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">e^x,e^{2x}   			\\ %上标，多个上标使用{}
x_0,T_1 				\\ %下标
\sqrt{abc},\sqrt[5]{abc}\\ %根号,语法为\sqrt[n] 未给出n则默认为2
\frac{xyz}{lmn}			\\ %分式
()						\\ %小括号
[]						\\ %中括号
\lbrace \rbrace 		\\ %大括号
\cdots         			\\ %省略号
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.175535em;vertical-align:-0.19444em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981095em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">c</span></span></span><span style="top:-2.941095em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.058904999999999985em;"><span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord sqrt"><span class="root"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.875534em;"><span style="top:-3.053314em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size6 size1 mtight"><span class="mord mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.981095em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">c</span></span></span><span style="top:-2.941095em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width="400em" height="1.08em" viewBox="0 0 400000 1080" preserveAspectRatio="xMinYMin slice"><path d="M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z"></path></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.058904999999999985em;"><span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.7935599999999998em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1075599999999999em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">m</span><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mclose">]</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">{</span><span class="mclose">}</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.31em;vertical-align:0em;"></span><span class="minner">⋯</span></span><span class="mspace newline"></span></span></span></span></p>
<hr>
<h2 id="基本数学运算"><a class="markdownIt-Anchor" href="#基本数学运算"></a> 基本数学运算</h2>
<p>包括加，减，乘，除，点乘，星乘，加减，约等于，大于等于，小于等于，不等于。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">1 + 1 = 2 		<span class="keyword">\\</span> <span class="comment">%加</span></span><br><span class="line">1 - 1 = 0	    <span class="keyword">\\</span> <span class="comment">%减</span></span><br><span class="line">1 <span class="keyword">\times</span> 1 = 1 	<span class="keyword">\\</span> <span class="comment">%乘</span></span><br><span class="line">1 <span class="keyword">\div</span> 1 = 1 	<span class="keyword">\\</span> <span class="comment">%除</span></span><br><span class="line">a <span class="keyword">\cdot</span> b 		<span class="keyword">\\</span> <span class="comment">%点乘</span></span><br><span class="line">a <span class="keyword">\ast</span>  b 		<span class="keyword">\\</span> <span class="comment">%星乘</span></span><br><span class="line">a <span class="keyword">\pm</span> b 		<span class="keyword">\\</span> <span class="comment">%加减</span></span><br><span class="line"><span class="keyword">\pi</span> <span class="keyword">\approx</span> 3.14<span class="keyword">\\</span> <span class="comment">%约等于，其中\pi表示数学Π</span></span><br><span class="line">a <span class="keyword">\geq</span> b        <span class="keyword">\\</span> <span class="comment">%大于等于</span></span><br><span class="line">a <span class="keyword">\leq</span> b 		<span class="keyword">\\</span> <span class="comment">%小于等于</span></span><br><span class="line">a <span class="keyword">\neq</span> b 		   <span class="comment">%不等于</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span>					</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>2</mn><mspace linebreak="newline"></mspace><mn>1</mn><mo>−</mo><mn>1</mn><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mn>1</mn><mo>×</mo><mn>1</mn><mo>=</mo><mn>1</mn><mspace linebreak="newline"></mspace><mn>1</mn><mo>÷</mo><mn>1</mn><mo>=</mo><mn>1</mn><mspace linebreak="newline"></mspace><mi>a</mi><mo>⋅</mo><mi>b</mi><mspace linebreak="newline"></mspace><mi>a</mi><mo>∗</mo><mi>b</mi><mspace linebreak="newline"></mspace><mi>a</mi><mo>±</mo><mi>b</mi><mspace linebreak="newline"></mspace><mi>π</mi><mo>≈</mo><mn>3.14</mn><mspace linebreak="newline"></mspace><mi>a</mi><mo>≥</mo><mi>b</mi><mspace linebreak="newline"></mspace><mi>a</mi><mo>≤</mo><mi>b</mi><mspace linebreak="newline"></mspace><mi>a</mi><mi mathvariant="normal">≠</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">1 + 1 = 2 		\\ %加
1 - 1 = 0	    \\ %减
1 \times 1 = 1 	\\ %乘
1 \div 1 = 1 	\\ %除
a \cdot b 		\\ %点乘
a \ast  b 		\\ %星乘
a \pm b 		\\ %加减
\pi \approx 3.14\\ %约等于，其中\pi表示数学Π
a \geq b        \\ %大于等于
a \leq b 		\\ %小于等于
a \neq b 		   %不等于
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">±</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.48312em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">.</span><span class="mord">1</span><span class="mord">4</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span></span></p>
<hr>
<h2 id="基本初等函数"><a class="markdownIt-Anchor" href="#基本初等函数"></a> 基本初等函数</h2>
<p>包括三角函数，对数函数。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\sin</span>{<span class="keyword">\theta</span>}			<span class="keyword">\\</span> <span class="comment">%正弦，\theta表示θ</span></span><br><span class="line"><span class="keyword">\cos</span>{<span class="keyword">\theta</span>}			<span class="keyword">\\</span> <span class="comment">%余弦</span></span><br><span class="line"><span class="keyword">\tan</span>{<span class="keyword">\theta</span>}			<span class="keyword">\\</span> <span class="comment">%正切</span></span><br><span class="line"><span class="keyword">\cot</span>{<span class="keyword">\theta</span>}			<span class="keyword">\\</span> <span class="comment">%余切</span></span><br><span class="line"><span class="keyword">\log</span><span class="built_in">_</span>m n,<span class="keyword">\lg</span>{x},<span class="keyword">\ln</span>{x}	   <span class="comment">%对数</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>sin</mi><mo>⁡</mo><mi>θ</mi><mspace linebreak="newline"></mspace><mi>cos</mi><mo>⁡</mo><mi>θ</mi><mspace linebreak="newline"></mspace><mi>tan</mi><mo>⁡</mo><mi>θ</mi><mspace linebreak="newline"></mspace><mi>cot</mi><mo>⁡</mo><mi>θ</mi><mspace linebreak="newline"></mspace><msub><mo><mi>log</mi><mo>⁡</mo></mo><mi>m</mi></msub><mi>n</mi><mo separator="true">,</mo><mi>lg</mi><mo>⁡</mo><mi>x</mi><mo separator="true">,</mo><mi>ln</mi><mo>⁡</mo><mi>x</mi></mrow><annotation encoding="application/x-tex">\sin{\theta}			\\ %正弦，\theta表示θ
\cos{\theta}			\\ %余弦
\tan{\theta}			\\ %正切
\cot{\theta}			\\ %余切
\log_m n,\lg{x},\ln{x}	%对数
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">sin</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">cos</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">cot</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.93858em;vertical-align:-0.24414em;"></span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.057252em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">l<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">ln</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span></span></span></p>
<hr>
<h2 id="高等数学运算"><a class="markdownIt-Anchor" href="#高等数学运算"></a> 高等数学运算</h2>
<p>包括正负无穷、累加，累乘，向量，极限，导数，偏导数，积分。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">+<span class="keyword">\infty</span> ,-<span class="keyword">\infty</span>						<span class="keyword">\\</span> <span class="comment">%正负无穷</span></span><br><span class="line"><span class="keyword">\sum</span><span class="built_in">_</span>{i=0}<span class="built_in">^</span>{n}{x<span class="built_in">_</span>i}         			<span class="keyword">\\</span> <span class="comment">%累加</span></span><br><span class="line"><span class="keyword">\prod</span><span class="built_in">_</span>{i=0}<span class="built_in">^</span>{n}{x<span class="built_in">_</span>i}					<span class="keyword">\\</span> <span class="comment">%累乘</span></span><br><span class="line"><span class="keyword">\vec</span>{a},<span class="keyword">\vec</span>{AB}	   					<span class="keyword">\\</span> <span class="comment">%向量</span></span><br><span class="line"><span class="keyword">\lim</span><span class="built_in">_</span>{n<span class="keyword">\rightarrow</span>+<span class="keyword">\infty</span>}{<span class="keyword">\frac</span>{1}{n}}	<span class="keyword">\\</span> <span class="comment">%极限</span></span><br><span class="line">x',x''									<span class="keyword">\\</span> <span class="comment">%导数</span></span><br><span class="line"><span class="keyword">\partial</span> x								<span class="keyword">\\</span> <span class="comment">%偏导</span></span><br><span class="line"><span class="keyword">\int</span>{f(x)}dx,<span class="keyword">\int</span><span class="built_in">_</span>0<span class="built_in">^</span>{+<span class="keyword">\infty</span>}{f(x)dx}      <span class="comment">%积分</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>+</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mo>−</mo><mi mathvariant="normal">∞</mi><mspace linebreak="newline"></mspace><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace><munderover><mo>∏</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mi>n</mi></munderover><msub><mi>x</mi><mi>i</mi></msub><mspace linebreak="newline"></mspace><mover accent="true"><mi>a</mi><mo>⃗</mo></mover><mo separator="true">,</mo><mover accent="true"><mrow><mi>A</mi><mi>B</mi></mrow><mo>⃗</mo></mover><mspace linebreak="newline"></mspace><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></munder><mfrac><mn>1</mn><mi>n</mi></mfrac><mspace linebreak="newline"></mspace><msup><mi>x</mi><mo mathvariant="normal">′</mo></msup><mo separator="true">,</mo><msup><mi>x</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mspace linebreak="newline"></mspace><mi mathvariant="normal">∂</mi><mi>x</mi><mspace linebreak="newline"></mspace><mo>∫</mo><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mi>d</mi><mi>x</mi><mo separator="true">,</mo><msubsup><mo>∫</mo><mn>0</mn><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow></mrow><annotation encoding="application/x-tex">+\infty ,-\infty						\\ %正负无穷
\sum_{i=0}^{n}{x_i}         			\\ %累加
\prod_{i=0}^{n}{x_i}					\\ %累乘
\vec{a},\vec{AB}	   					\\ %向量
\lim_{n\rightarrow+\infty}{\frac{1}{n}}	\\ %极限
x',x''									\\ %导数
\partial x								\\ %偏导
\int{f(x)}dx,\int_0^{+\infty}{f(x)dx}      %积分
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord">+</span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord">∞</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∏</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.1607699999999999em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.714em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewBox="0 0 471 714" preserveAspectRatio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z"></path></svg></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.9663299999999999em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span><span style="top:-3.25233em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.2355em;"><span class="overlay" style="height:0.714em;width:0.471em;"><svg width="0.471em" height="0.714em" style="width:0.471em" viewBox="0 0 471 714" preserveAspectRatio="xMinYMin"><path d="M377 20c0-5.333 1.833-10 5.5-14S391 0 397 0c4.667 0 8.667 1.667 12 5
3.333 2.667 6.667 9 10 19 6.667 24.667 20.333 43.667 41 57 7.333 4.667 11
10.667 11 18 0 6-1 10-3 12s-6.667 5-14 9c-28.667 14.667-53.667 35.667-75 63
-1.333 1.333-3.167 3.5-5.5 6.5s-4 4.833-5 5.5c-1 .667-2.5 1.333-4.5 2s-4.333 1
-7 1c-4.667 0-9.167-1.833-13.5-5.5S337 184 337 178c0-12.667 15.667-32.333 47-59
H213l-171-1c-8.667-6-13-12.333-13-19 0-4.667 4.333-11.333 13-20h359
c-16-25.333-24-45-24-59z"></path></svg></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.079771em;vertical-align:-0.758331em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mrel mtight">→</span><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop">lim</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.758331em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.4331810000000003em;vertical-align:-0.9119499999999999em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5212310000000002em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span><span style="top:-3.8129000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span></span></span></span></span></span></p>
<hr>
<h2 id="希腊字母"><a class="markdownIt-Anchor" href="#希腊字母"></a> 希腊字母</h2>
<p>列举了一些常用的希腊字母。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\alpha</span>,<span class="keyword">\beta</span>,<span class="keyword">\gamma</span>,<span class="keyword">\delta</span>    	<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\eta</span>,<span class="keyword">\theta</span>,<span class="keyword">\lambda</span>,<span class="keyword">\mu</span>	     	<span class="keyword">\\</span></span><br><span class="line"><span class="keyword">\pi</span>,<span class="keyword">\rho</span>,<span class="keyword">\xi</span>,<span class="keyword">\nu</span> </span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>α</mi><mo separator="true">,</mo><mi>β</mi><mo separator="true">,</mo><mi>γ</mi><mo separator="true">,</mo><mi>δ</mi><mspace linebreak="newline"></mspace><mi>η</mi><mo separator="true">,</mo><mi>θ</mi><mo separator="true">,</mo><mi>λ</mi><mo separator="true">,</mo><mi>μ</mi><mspace linebreak="newline"></mspace><mi>π</mi><mo separator="true">,</mo><mi>ρ</mi><mo separator="true">,</mo><mi>ξ</mi><mo separator="true">,</mo><mi>ν</mi></mrow><annotation encoding="application/x-tex">\alpha,\beta,\gamma,\delta    	\\
\eta,\theta,\lambda,\mu	     	\\
\pi,\rho,\xi,\nu
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05278em;">β</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05556em;">γ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03785em;">δ</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">η</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">θ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">λ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">μ</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">π</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">ρ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.04601em;">ξ</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.06366em;">ν</span></span></span></span></span></p>
<p>其他的希腊字母的语法如下图所示：</p>
<p><img src="http://qiniu.teksab.cn/img/Markdown%E6%A0%BC%E5%BC%8F/LaTex%E5%B8%8C%E8%85%8A%E5%AD%97%E6%AF%8D%E8%A1%A8.png" alt=""></p>
<hr>
<h2 id="矩阵"><a class="markdownIt-Anchor" href="#矩阵"></a> 矩阵</h2>
<p>使用<code>\begin{matrix}…\end{matrix}</code> 表示矩阵；其中**<code>&amp;</code>** 表示空格；**<code>\tag{&lt;int&gt;}</code>**表示式子序号。</p>
<h3 id="简单矩阵"><a class="markdownIt-Anchor" href="#简单矩阵"></a> 简单矩阵</h3>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>{matrix}          <span class="comment">%不带符号的简单矩阵</span></span><br><span class="line"> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line"> 4 <span class="built_in">&amp;</span> 5 <span class="built_in">&amp;</span> 6 <span class="keyword">\\</span></span><br><span class="line"> 7 <span class="built_in">&amp;</span> 8 <span class="built_in">&amp;</span> 9 </span><br><span class="line"><span class="keyword">\end</span>{matrix}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{matrix}          %不带符号的简单矩阵
 1 &amp; 2 &amp; 3 \\
 4 &amp; 5 &amp; 6 \\
 7 &amp; 8 &amp; 9 
\end{matrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6000000000000005em;vertical-align:-1.5500000000000007em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="行列式"><a class="markdownIt-Anchor" href="#行列式"></a> 行列式</h3>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"> <span class="keyword">\begin</span>{vmatrix}</span><br><span class="line">   1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line">   4 <span class="built_in">&amp;</span> 5 <span class="built_in">&amp;</span> 6 <span class="keyword">\\</span></span><br><span class="line">   7 <span class="built_in">&amp;</span> 8 <span class="built_in">&amp;</span> 9</span><br><span class="line">  <span class="keyword">\end</span>{vmatrix}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow><annotation encoding="application/x-tex">\begin{vmatrix}
   1 &amp; 2 &amp; 3 \\
   4 &amp; 5 &amp; 6 \\
   7 &amp; 8 &amp; 9
  \end{vmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.636em;vertical-align:-1.5500299999999998em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.08597em;"><span style="top:-1.05597em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6619700000000002em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26797em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87397em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.08597em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500299999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.08597em;"><span style="top:-1.05597em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.6619700000000002em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.26797em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.87397em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.47997em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.08597em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500299999999998em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="行内矩阵"><a class="markdownIt-Anchor" href="#行内矩阵"></a> 行内矩阵</h3>
<p>使用<code>\bigl(\begin{smallmatrix} ... \end{smallmatrix}\bigr)</code>在一行内显示矩阵。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">行内矩阵<span class="built_in">$</span><span class="keyword">\bigl</span>(<span class="keyword">\begin</span>{smallmatrix} a <span class="built_in">&amp;</span> b <span class="keyword">\\</span> c <span class="built_in">&amp;</span> d <span class="keyword">\end</span>{smallmatrix}<span class="keyword">\bigr</span>)<span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>行内矩阵\bigl(<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.788ex;" xmlns="http://www.w3.org/2000/svg" width="2.432ex" height="2.708ex" role="img" focusable="false" viewBox="0 -848.5 1074.8 1197"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mtable"><g data-mml-node="mtr" transform="translate(0,357.8) scale(0.707)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mtd" transform="translate(1045.4,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-340.7) scale(0.707)"><g data-mml-node="mtd" transform="translate(48,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mtd" transform="translate(999.9,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g></g></g></svg></mjx-container>\bigr)</p>
<h3 id="带符号的矩阵"><a class="markdownIt-Anchor" href="#带符号的矩阵"></a> 带符号的矩阵</h3>
<ol>
<li>带小括号的矩阵</li>
</ol>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\left</span>(</span><br><span class="line"><span class="keyword">\begin</span>{matrix}         </span><br><span class="line"> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line"> 4 <span class="built_in">&amp;</span> 5 <span class="built_in">&amp;</span> 6 <span class="keyword">\\</span></span><br><span class="line"> 7 <span class="built_in">&amp;</span> 8 <span class="built_in">&amp;</span> 9 </span><br><span class="line"><span class="keyword">\end</span>{matrix}</span><br><span class="line"><span class="keyword">\right</span>)<span class="keyword">\tag</span>{1}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mo fence="true">(</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence="true">)</mo></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\left(
\begin{matrix}         
 1 &amp; 2 &amp; 3 \\
 4 &amp; 5 &amp; 6 \\
 7 &amp; 8 &amp; 9 
\end{matrix}
\right)\tag{1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎝</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎛</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎠</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎞</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p>
<ol start="2">
<li>带中括号的矩阵</li>
</ol>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\left</span>[</span><br><span class="line"><span class="keyword">\begin</span>{matrix}         </span><br><span class="line"> 1 <span class="built_in">&amp;</span> 2 <span class="built_in">&amp;</span> 3 <span class="keyword">\\</span></span><br><span class="line"> 4 <span class="built_in">&amp;</span> 5 <span class="built_in">&amp;</span> 6 <span class="keyword">\\</span></span><br><span class="line"> 7 <span class="built_in">&amp;</span> 8 <span class="built_in">&amp;</span> 9 </span><br><span class="line"><span class="keyword">\end</span>{matrix}</span><br><span class="line"><span class="keyword">\right</span>]<span class="keyword">\tag</span>{2-1}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%另一种方式</span></span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>{bmatrix}</span><br><span class="line"> 11 <span class="built_in">&amp;</span> 22 <span class="built_in">&amp;</span> 33 <span class="keyword">\\</span></span><br><span class="line"> 44 <span class="built_in">&amp;</span> 55 <span class="built_in">&amp;</span> 66 <span class="keyword">\\</span></span><br><span class="line"> 77 <span class="built_in">&amp;</span> 88 <span class="built_in">&amp;</span> 90 </span><br><span class="line"><span class="keyword">\end</span>{bmatrix}<span class="keyword">\tag</span>{2-2}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>2</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>4</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>5</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>6</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>7</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>8</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>9</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(2-1)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\left[
\begin{matrix}         
 1 &amp; 2 &amp; 3 \\
 4 &amp; 5 &amp; 6 \\
 7 &amp; 8 &amp; 9 
\end{matrix}
\right]\tag{2-1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span><span class="mord">-</span><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>11</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>22</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>33</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>44</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>55</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>66</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>77</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>88</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>90</mn></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(2-2)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{bmatrix}
 11 &amp; 22 &amp; 33 \\
 44 &amp; 55 &amp; 66 \\
 77 &amp; 88 &amp; 90 
\end{bmatrix}\tag{2-2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">4</span><span class="mord">4</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span><span class="mord">7</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord">2</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span><span class="mord">5</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">8</span><span class="mord">8</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span><span class="mord">3</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">6</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">9</span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05002em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-4.05002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:3.60004em;vertical-align:-1.55002em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span><span class="mord">-</span><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p>
<h3 id="复杂矩阵"><a class="markdownIt-Anchor" href="#复杂矩阵"></a> 复杂矩阵</h3>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">A=<span class="keyword">\begin</span>{bmatrix}</span><br><span class="line">	a<span class="built_in">_</span>{11} <span class="built_in">&amp;</span> a<span class="built_in">_</span>{12} <span class="built_in">&amp;</span> ... <span class="built_in">&amp;</span> a<span class="built_in">_</span>{1n} <span class="keyword">\\</span></span><br><span class="line">    a<span class="built_in">_</span>{21} <span class="built_in">&amp;</span> a<span class="built_in">_</span>{22} <span class="built_in">&amp;</span> ... <span class="built_in">&amp;</span> a<span class="built_in">_</span>{2n} <span class="keyword">\\</span></span><br><span class="line">    a<span class="built_in">_</span>{31} <span class="built_in">&amp;</span> a<span class="built_in">_</span>{22} <span class="built_in">&amp;</span> ... <span class="built_in">&amp;</span> a<span class="built_in">_</span>{3n} <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\vdots</span> <span class="built_in">&amp;</span> <span class="keyword">\vdots</span> <span class="built_in">&amp;</span> <span class="keyword">\ddots</span> <span class="built_in">&amp;</span> <span class="keyword">\vdots</span><span class="keyword">\\</span></span><br><span class="line">    a<span class="built_in">_</span>{n1} <span class="built_in">&amp;</span> a<span class="built_in">_</span>{n2} <span class="built_in">&amp;</span>...<span class="built_in">&amp;</span> a<span class="built_in">_</span>{nn}</span><br><span class="line">   <span class="keyword">\end</span>{bmatrix},</span><br><span class="line">b=<span class="keyword">\begin</span>{bmatrix}</span><br><span class="line">	b<span class="built_in">_</span>{1} <span class="keyword">\\</span></span><br><span class="line">    b<span class="built_in">_</span>{2} <span class="keyword">\\</span></span><br><span class="line">    b<span class="built_in">_</span>{3} <span class="keyword">\\</span></span><br><span class="line">    <span class="keyword">\vdots</span> <span class="keyword">\\</span></span><br><span class="line">    b<span class="built_in">_</span>{n}</span><br><span class="line">   <span class="keyword">\end</span>{bmatrix}<span class="keyword">\tag</span>{3}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>A</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>31</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>3</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo>⋱</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo separator="true">,</mo><mi>b</mi><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mn>3</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi mathvariant="normal">⋮</mi><mpadded height="+0em" voffset="0em"><mspace mathbackground="black" width="0em" height="1.5em"></mspace></mpadded></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>b</mi><mi>n</mi></msub></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(3)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">A=\begin{bmatrix}
	a_{11} &amp; a_{12} &amp; ... &amp; a_{1n} \\
    a_{21} &amp; a_{22} &amp; ... &amp; a_{2n} \\
    a_{31} &amp; a_{22} &amp; ... &amp; a_{3n} \\
    \vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
    a_{n1} &amp; a_{n2} &amp;...&amp; a_{nn}
   \end{bmatrix},
b=\begin{bmatrix}
	b_{1} \\
    b_{2} \\
    b_{3} \\
    \vdots \\
    b_{n}
   \end{bmatrix}\tag{3}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.66em;vertical-align:-3.08em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.554995em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.9049750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.5059750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1069750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.7079750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.308975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.554995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.0275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.1675000000000004em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-0.9675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.08em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.0275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.1675000000000004em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-0.9675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.08em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.240000000000001em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-5.04em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-3.84em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span><span style="top:-1.9800000000000006em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="minner">⋱</span></span></span><span style="top:-0.78em;"><span class="pstrut" style="height:3.5em;"></span><span class="mord"><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.08em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.0275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.1675000000000004em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-0.9675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.08em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.554995em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.9049750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.5059750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1069750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.7079750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.308975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.554995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:6.66em;vertical-align:-3.08em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.554995em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-1.9049750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-2.5059750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.1069750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-3.7079750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.308975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-5.554995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.5800000000000005em;"><span style="top:-6.427500000000001em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-5.2275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-4.0275em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.1675000000000004em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-0.9675em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.08em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.554995em;"><span style="top:-0.7499750000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-1.9049750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-2.5059750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.1069750000000003em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-3.7079750000000002em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.308975em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-5.554995em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.050045em;"><span></span></span></span></span></span></span></span></span><span class="tag"><span class="strut" style="height:6.66em;vertical-align:-3.08em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">3</span></span><span class="mord">)</span></span></span></span></span></span></p>
<hr>
<h2 id="表达式"><a class="markdownIt-Anchor" href="#表达式"></a> 表达式</h2>
<ol>
<li>条件表达式</li>
</ol>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line">f(x)=<span class="keyword">\begin</span>{cases}</span><br><span class="line">	3x + 1,<span class="built_in">&amp;</span>x<span class="keyword">\;</span>{<span class="keyword">\geq</span>}<span class="keyword">\;</span>0 <span class="keyword">\\</span></span><br><span class="line">	e<span class="built_in">^</span>x,<span class="built_in">&amp;</span>x&lt;0</span><br><span class="line"><span class="keyword">\end</span>{cases}<span class="keyword">\tag</span>{1}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mi>x</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mtext>  </mtext><mo>≥</mo><mtext>  </mtext><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msup><mi>e</mi><mi>x</mi></msup><mo separator="true">,</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>&lt;</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(1)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">f(x)=\begin{cases}
	3x + 1,&amp;x\;{\geq}\;0 \\
	e^x,&amp;x&lt;0
\end{cases}\tag{1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mpunct">,</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mrel">≥</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="tag"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">1</span></span><span class="mord">)</span></span></span></span></span></span></p>
<ol start="2">
<li>方程组</li>
</ol>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>{cases}</span><br><span class="line">	3x + 4y + z <span class="keyword">\\</span></span><br><span class="line">	5x - y + 3z <span class="keyword">\\</span></span><br><span class="line">	x + y - 6z</span><br><span class="line"><span class="keyword">\end</span>{cases}<span class="keyword">\tag</span>{2}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mtable width="100%"><mtr><mtd width="50%"></mtd><mtd><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn><mi>x</mi><mo>+</mo><mn>4</mn><mi>y</mi><mo>+</mo><mi>z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>5</mn><mi>x</mi><mo>−</mo><mi>y</mi><mo>+</mo><mn>3</mn><mi>z</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>+</mo><mi>y</mi><mo>−</mo><mn>6</mn><mi>z</mi></mrow></mstyle></mtd></mtr></mtable></mrow></mtd><mtd width="50%"></mtd><mtd><mtext>(2)</mtext></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{cases}
	3x + 4y + z \\
	5x - y + 3z \\
	x + y - 6z
\end{cases}\tag{2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.30001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">3</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">4</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">5</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">6</span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="tag"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="mord text"><span class="mord">(</span><span class="mord"><span class="mord">2</span></span><span class="mord">)</span></span></span></span></span></span></p>
<hr>
<h2 id="方程式序列"><a class="markdownIt-Anchor" href="#方程式序列"></a> 方程式序列</h2>
<p>使用 <code>\begin{align}…\end{align}</code> 来表达一列方程式 。</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br><span class="line"><span class="keyword">\begin</span>{align}</span><br><span class="line">	a<span class="built_in">^</span>3+b<span class="built_in">^</span>3 <span class="built_in">&amp;</span> = a<span class="built_in">^</span>3+a<span class="built_in">^</span>2<span class="keyword">\times</span> b+b<span class="built_in">^</span>3-a<span class="built_in">^</span>2<span class="keyword">\times</span> b <span class="keyword">\tag</span>{1}<span class="keyword">\\</span></span><br><span class="line">			<span class="built_in">&amp;</span> = a<span class="built_in">^</span>2(a+b)-b(a<span class="built_in">^</span>2-b<span class="built_in">^</span>2)           	<span class="keyword">\tag</span>{2}<span class="keyword">\\</span></span><br><span class="line">			<span class="built_in">&amp;</span> = a<span class="built_in">^</span>2(a+b)-b(a+b)(a-b) 			<span class="keyword">\tag</span>{3}<span class="keyword">\\</span></span><br><span class="line">			<span class="built_in">&amp;</span> = (a+b)(a<span class="built_in">^</span>2-ab+b<span class="built_in">^</span>2) 				<span class="keyword">\tag</span>{4}</span><br><span class="line"><span class="keyword">\end</span>{align}</span><br><span class="line"><span class="built_in">$</span><span class="built_in">$</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<mjx-container class="MathJax" jax="SVG" display="true" width="full" style="min-width: 45.329ex;"><svg style="vertical-align: -5.583ex; min-width: 45.329ex;" xmlns="http://www.w3.org/2000/svg" width="100%" height="12.298ex" role="img" focusable="false"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(0.0181,-0.0181) translate(0, -2967.9)"><g data-mml-node="math"><g data-mml-node="mtable" transform="translate(2078,0) translate(-2078,0)"><g transform="translate(0 2967.9) matrix(1 0 0 -1 0 0) scale(55.25)"><svg data-table="true" preserveAspectRatio="xMidYMid" viewBox="7939.7 -2967.9 1 5435.7"><g transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mlabeledtr" transform="translate(0,2083.9)"><g data-mml-node="mtd"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,413) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1187.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(2188,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,413) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mtd" transform="translate(3053.6,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,413) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(2521.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(3521.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4709.3,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(5709.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(6360.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(7361,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,413) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(8448.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(9449,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(10636.8,0)"><path data-c="D7" d="M630 29Q630 9 609 9Q604 9 587 25T493 118L389 222L284 117Q178 13 175 11Q171 9 168 9Q160 9 154 15T147 29Q147 36 161 51T255 146L359 250L255 354Q174 435 161 449T147 471Q147 480 153 485T168 490Q173 490 175 489Q178 487 284 383L389 278L493 382Q570 459 587 475T609 491Q630 491 630 471Q630 464 620 453T522 355L418 250L522 145Q606 61 618 48T630 29Z"></path></g><g data-mml-node="mi" transform="translate(11637,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g><g data-mml-node="mlabeledtr" transform="translate(0,650)"><g data-mml-node="mtd" transform="translate(3053.6,0)"></g><g data-mml-node="mtd" transform="translate(3053.6,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2299.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2688.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(3439.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4439.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(4868.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5479.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6480,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(6909,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(7298,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(8485.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(9486,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(10351.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mlabeledtr" transform="translate(0,-783.9)"><g data-mml-node="mtd" transform="translate(3053.6,0)"></g><g data-mml-node="mtd" transform="translate(3053.6,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(1333.6,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2299.1,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(2688.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(3439.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4439.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(4868.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(5479.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6480,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(6909,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(7298,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(8049.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(9049.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(9478.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(9867.4,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(10256.4,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(11007.7,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(12007.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(12436.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g><g data-mml-node="mlabeledtr" transform="translate(0,-2217.9)"><g data-mml-node="mtd" transform="translate(3053.6,0)"></g><g data-mml-node="mtd" transform="translate(3053.6,0)"><g data-mml-node="mi"></g><g data-mml-node="mo" transform="translate(277.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(1333.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1722.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(2473.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(3474,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(3903,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4292,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(4681,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(562,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(5868.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(6869,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(7398,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(8049.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msup" transform="translate(9049.4,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(9915,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></g></svg><svg data-labels="true" preserveAspectRatio="xMaxYMid" viewBox="1278 -2967.9 1 5435.7"><g data-labels="true" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="mtd" id="mjx-eqn:1" transform="translate(0,2833.9)"><text data-id-align="true"></text><g data-idbox="true" transform="translate(0,-750)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(389,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889,0)"></path></g></g></g><g data-mml-node="mtd" id="mjx-eqn:2" transform="translate(0,1400)"><text data-id-align="true"></text><g data-idbox="true" transform="translate(0,-750)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(389,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889,0)"></path></g></g></g><g data-mml-node="mtd" id="mjx-eqn:3" transform="translate(0,-33.9)"><text data-id-align="true"></text><g data-idbox="true" transform="translate(0,-750)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(389,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889,0)"></path></g></g></g><g data-mml-node="mtd" id="mjx-eqn:4" transform="translate(0,-1467.9)"><text data-id-align="true"></text><g data-idbox="true" transform="translate(0,-750)"><g data-mml-node="mtext"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(389,0)"></path><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" transform="translate(889,0)"></path></g></g></g></g></svg></g></g></g></g></svg></mjx-container>

]]></content>
      <categories>
        <category>Tools</category>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Java核心技术</title>
    <url>/2021/07/30/Java%20EE/</url>
    <content><![CDATA[<p>本文主要借鉴《Java核心技术》一书，对Java知识进行详细介绍。</p>
<p><em><span id="more"></span></em></p>
<h1 id="java-概述"><a class="markdownIt-Anchor" href="#java-概述"></a> Java 概述</h1>
<h2 id="jvm-jre和jdk的关系"><a class="markdownIt-Anchor" href="#jvm-jre和jdk的关系"></a> JVM、JRE和JDK的关系</h2>
<ul>
<li><strong>JVM</strong></li>
</ul>
<p>Java Virtual Machine是Java虚拟机，Java程序需要运行在虚拟机上，不同的平台有自己的虚拟机，因此Java语言可以实现跨平台。</p>
<ul>
<li><strong>JRE</strong></li>
</ul>
<p>Java Runtime Environment包括Java虚拟机和Java程序所需的核心类库等。核心类库主要是java.lang包：包含了运行Java程序必不可少的系统类，如基本数据类型、基本数学函数、字符串处理、线程、异常处理类等，系统缺省加载这个包</p>
<p>如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。</p>
<ul>
<li><strong>JDK</strong></li>
</ul>
<p>Java Development Kit是提供给Java开发人员使用的，其中包含了Java的开发工具，也包括了JRE。所以安装了JDK，就无需再单独安装JRE了。其中的开发工具：编译工具(javac.exe)，打包工具(jar.exe)等</p>
<ul>
<li><strong>JVM&amp;JRE&amp;JDK关系图</strong></li>
</ul>
<p><img src="http://qiniu.teksab.cn/img/Java%20EE/JVM%E3%80%81JRE%E5%92%8CJDK.png" alt="" /></p>
<h1 id="java基础语法"><a class="markdownIt-Anchor" href="#java基础语法"></a> Java基础语法</h1>
<h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2>
<p>Java的基本数据类型中 <strong>并没有</strong> <em><strong>String</strong></em> 类型</p>
<h3 id="整数类型"><a class="markdownIt-Anchor" href="#整数类型"></a> 整数类型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">长度</th>
<th style="text-align:center">取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Byte</td>
<td style="text-align:center">1</td>
<td style="text-align:center">8位</td>
<td style="text-align:center">-2<sup>7</sup>~2<sup>7</sup>-1</td>
</tr>
<tr>
<td style="text-align:center">short</td>
<td style="text-align:center">2</td>
<td style="text-align:center">16位</td>
<td style="text-align:center">-2<sup>15</sup>~2<sup>15</sup>-1</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">4</td>
<td style="text-align:center">32位</td>
<td style="text-align:center">-2<sup>31</sup>~2<sup>31</sup>-1</td>
</tr>
<tr>
<td style="text-align:center">long</td>
<td style="text-align:center">8</td>
<td style="text-align:center">64位</td>
<td style="text-align:center">-2<sup>63</sup>~2<sup>63</sup>-1</td>
</tr>
</tbody>
</table>
<p>long在赋值时与int区分开需要在正数后面加上 <strong>L</strong> 或 l，十六进制数值有一个前缀 <strong>0x</strong></p>
<h3 id="浮点类型"><a class="markdownIt-Anchor" href="#浮点类型"></a> 浮点类型</h3>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">字节</th>
<th style="text-align:center">长度</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">float</td>
<td style="text-align:center">4</td>
<td style="text-align:center">32位</td>
</tr>
<tr>
<td style="text-align:center">double</td>
<td style="text-align:center">8</td>
<td style="text-align:center">64位</td>
</tr>
</tbody>
</table>
<h3 id="字符类型"><a class="markdownIt-Anchor" href="#字符类型"></a> 字符类型</h3>
<p>char类型的字面量值要用单引号括起来，如 <code>'A'</code>,与<code>&quot;A&quot;</code>不同的是，后者表示字符串。</p>
<ol>
<li>char型</li>
<li>转义字符       以反斜杠“ \ ”开头，后跟一个或多个字符</li>
</ol>
<h3 id="boolean-类型"><a class="markdownIt-Anchor" href="#boolean-类型"></a> Boolean 类型</h3>
<p>boolean类型有两个值：false和true，用来判断逻辑条件。<em><strong>整型值和布尔值之间不能进行相互转换</strong></em>。</p>
<h2 id="变量"><a class="markdownIt-Anchor" href="#变量"></a> 变量</h2>
<h3 id="变量-2"><a class="markdownIt-Anchor" href="#变量-2"></a> 变量</h3>
<p>变量名必须是一个以字母开头的由字母或数字构成的序列。变量名中所有的字母都是有意义的，且大小写敏感。另外不能将变量名命名为Java保留字；声明一个变量后，<strong>必须用赋值语句对变量进行显式初始化。</strong></p>
<h3 id="常量"><a class="markdownIt-Anchor" href="#常量"></a> 常量</h3>
<p>常量使用 <strong>final</strong>  关键字进行限定，常量名使用全大写。</p>
<p>在Java中，如果希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为类常量，使用关键字</p>
<p><strong>static final</strong> 设置一个类常量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Constant</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">CM_PER_INCH</span> <span class="operator">=</span> <span class="number">2.54</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">	&#123;</span><br><span class="line">    	...</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类常量的定义位于main方法的外部。                                                           </span></span><br></pre></td></tr></table></figure>
<h2 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> 运算符</h2>
<h3 id="位运算符"><a class="markdownIt-Anchor" href="#位运算符"></a> 位运算符</h3>
<ol>
<li>位逻辑运算</li>
</ol>
<p>可以使用屏蔽技术获得整数中的各个位，位运算符包括：&amp;(与) ，|（或），^（异或）, ~（取反）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">fourthBitFromRight</span> <span class="operator">=</span> (n &amp; <span class="number">0b1000</span>)/ <span class="number">0b1000</span></span><br><span class="line">如果整型变量n第四位为<span class="number">1</span>，fourthBitFromRight为<span class="number">1</span>，否则为<span class="number">0</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>位移运算符</li>
</ol>
<p>&gt;&gt; (右移) ，&lt;&lt; （左移），&gt;&gt;&gt;（无符号右移）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">fourthBitFromRight</span> <span class="operator">=</span> (n &amp; (<span class="number">1</span>&lt;&lt;<span class="number">3</span>)) &gt;&gt; <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>将任意数字以二进制的方式进行位数移动运算</p>
<h3 id="三元运算符"><a class="markdownIt-Anchor" href="#三元运算符"></a> 三元运算符</h3>
<p>三元运算符的使用格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">条件表达式 ？ 值<span class="number">1</span> 值<span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>若条件表达式的值位true，则整个表达式取值1，否则取值2，等价于if……else语句</p>
<h2 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h2>
<p>Java中，单引号中的内容表示字符，而双引号的内容则表示字符串。</p>
<h3 id="string-类"><a class="markdownIt-Anchor" href="#string-类"></a> String 类</h3>
<ol>
<li>声明字符串</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String a;</span><br></pre></td></tr></table></figure>
<p>在不给字符串变量赋值的情况下，其默认值为  <strong>null</strong> ，如果此时调用String的方法，则会发生空指针异常。</p>
<ol start="2">
<li>创建字符串</li>
</ol>
<blockquote>
<ol>
<li>引用字符串常量</li>
</ol>
<p>直接将字符串常量赋值给String类型变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;Java Programming&quot;</span>;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>利用<strong>构造方法</strong>实例化</li>
</ol>
<p>使用new关键字创建String对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;我爱火锅&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(a);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>利用字符数组<strong>实例化</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[] charArray = &#123;<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray);</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>提取字符数组的一部分创建字符串对象</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[] charArray = &#123;<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line"><span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(charArray,<span class="number">2</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="字符串的连接"><a class="markdownIt-Anchor" href="#字符串的连接"></a> 字符串的连接</h3>
<ol>
<li>
<p>使用 <strong>“+”</strong> 运算符或 <strong>“+=”</strong> 可以连接多个字符串并产生一个String对象。</p>
</li>
<li>
<p>String自带的concat() 方法可以实现将指定字符串连接到此字符串结尾的功能</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">oldstr.concat(str);</span><br></pre></td></tr></table></figure>
<ul>
<li>oldstr:原字符串</li>
<li>str:原字符串末尾拼接的字符串</li>
</ul>
<h3 id="不可变字符串"><a class="markdownIt-Anchor" href="#不可变字符串"></a> 不可变字符串</h3>
<p>Java将String类对象称为不可变字符串，String类没有提供用于修改字符串的方法，可以引用另一个字符串达到修改的效果。</p>
<h3 id="空串与null串"><a class="markdownIt-Anchor" href="#空串与null串"></a> 空串与NULL串</h3>
<p>空串 “” 是长度为0的字符串，空串是一个有自己的长度（0）和内容（空）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//检查空串</span></span><br><span class="line"><span class="keyword">if</span>(str.lenght() == <span class="number">0</span>)   或  <span class="keyword">if</span>(str.equals(<span class="string">&quot;&quot;</span>))</span><br><span class="line"><span class="comment">//检查NULL串</span></span><br><span class="line"><span class="keyword">if</span>(str==<span class="literal">null</span>)</span><br></pre></td></tr></table></figure>
<h3 id="提取字符串信息"><a class="markdownIt-Anchor" href="#提取字符串信息"></a> 提取字符串信息</h3>
<ol>
<li>获取字符串的长度</li>
</ol>
<p><strong>length()</strong> 方法返回字符数量，获取字符串长度，也就是char的数量</p>
<blockquote>
<p>String的length()方法是类的成员方法，有括号；数组的length属性是数组的一个属性，没有括号。</p>
</blockquote>
<ol start="2">
<li>获取指定位置的字符</li>
</ol>
<p><strong>charAt( int  index)</strong> 方法用来获取指定索引的字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.charAt(<span class="type">int</span> index);</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>获取子字符串索引的位置</li>
</ol>
<p><strong>indexOf()</strong> 方法返回子字符串在字符串中首次出现的索引位置，如果没有检索到要查找的字符或字符串，则返回 <mark><strong>-1</strong></mark></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.indexOf(String substr);</span><br><span class="line">str.indexOf(String substr,<span class="type">int</span> fromIndex);</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>判断字符串首尾内容</li>
</ol>
<ul>
<li><strong>startsWith(String  prefix)</strong>  方法用于判断字符串是否以指定的前缀开始</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.startsWith(prefix);  <span class="comment">//返回boolean类型</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>endsWith(String  suffix)</strong> 方法判断字符串是否以指定的后缀结束</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.endsWith(suffix);	<span class="comment">//返回boolean类型</span></span><br></pre></td></tr></table></figure>
<ol start="5">
<li>获取字符数组</li>
</ol>
<p><strong>toCharArray()</strong> 方法可以将字符串转换为一个字符数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[] ch = str.toCharArray();</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>判断子字符串是否存在</li>
</ol>
<p><strong>contains()</strong> 方法可以判断字符串中是否包含指定的内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.contains(String str);	<span class="comment">//返回boolean类型</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串的操作"><a class="markdownIt-Anchor" href="#字符串的操作"></a> 字符串的操作</h3>
<ol>
<li>截取字符串</li>
</ol>
<p><strong>substring()</strong> 方法返回一个<strong>新字符串</strong>，该字符串从指定的beginIndex处的字符开始，直到<strong>endIndex-1</strong>处的字符结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.substring(<span class="type">int</span> beginIndex);</span><br><span class="line">str.sunstring(<span class="type">int</span> beginIndex, <span class="type">int</span> endIndex);		<span class="comment">//endIndex处内容不包括</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>字符串替换</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">replace(CharSequence oldstr,CharSequence newstr);</span><br><span class="line"><span class="comment">//用String或StringBuilder对象作为CharSequence参数</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>replace()</strong> 方法返回的是一个新字符串，如果字符串str中没有找到需要被替换的子字符串序列oldstr，则将原字符串返回</li>
</ul>
<ol start="3">
<li>字符串分割</li>
</ol>
<p><strong>split()</strong> 方法可根据给定的分隔符对字符串进行拆分，支持***正则表达式*** ，最后返回一个字符串数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.split(regex);	<span class="comment">//分隔符表达式</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li>大小写转换</li>
</ol>
<p><strong>toLowerCase()</strong> 方法可以将字符串中所有的字符转换为小写。如果字符串中没有应该被转换的字符，则将原字符串返回，否则将返回一个新字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.toLowerCase();</span><br></pre></td></tr></table></figure>
<p><strong>toUpperCase()</strong> 方法可以将字符串中所有的字符转换为大写。如果字符串中没有应该被转换的字符，则将原字符串返回，否则将返回一个新字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.UpperCase();</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>去除空白内容</li>
</ol>
<p><strong>trim()</strong> 方法可以将字符串<strong>首尾</strong>处的空白内容都删除</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">str.trim();</span><br></pre></td></tr></table></figure>
<h3 id="构建字符串"><a class="markdownIt-Anchor" href="#构建字符串"></a> 构建字符串</h3>
<p>StringBuffer类是<strong>线程安全</strong>的可变字符序列，一个类似与String类的<strong>字符串缓冲区</strong>。String类创建的字符串对象是不可修改的，StringBuffer类创建的字符串序列是可以修改的。String只能赋值一次，每一次内容发生改变都会生成一个新的对象，既耗时又浪费空间，所以说String本身是不可改变的。而StringBuffer不同，每次都是操作自身对象，而不是生成新的对象。</p>
<blockquote>
<p>StringBuilder类的前身是StringBuffer，<strong>StringBuffer效率有点低</strong>，但允许采用多线程的方式执行添加或删除字符的操作。如果所有字符串在一个单线程中，应该用StringBuilder替代它。这两个类的API是相同的。</p>
</blockquote>
<ol>
<li>创建StringBuffer类</li>
</ol>
<p>创建一个新的StringBuffer对象必须使用<strong>new</strong>，不能像String对象直接引用字符串常量</p>
<ol start="2">
<li>append()方法</li>
</ol>
<p><strong>append()</strong> 方法可以将参数转换为字符串，然后追加到此序列中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sbf.append(obj);  <span class="comment">//obj可以是一个单字符或字符串</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>setCharAt(int  index, cahr  ch)方法</li>
</ol>
<p><strong>setCharAt(int  index, cahr  ch)</strong> 方法将给定索引处的字符修改为ch</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sbf.setCharAt(<span class="type">int</span> index, <span class="type">char</span> ch);</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>inset(int offset, String  str )方法</li>
</ol>
<p><strong>inset(int offset, String  str )</strong> 方法将str插入到指定的索引值offset位置上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sbf.insert(<span class="type">int</span> offset, <span class="type">char</span> str);</span><br><span class="line">sbf.insert(<span class="type">int</span> offset, String str);</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>delete(int  start, int   end) 方法</li>
</ol>
<p><strong>delete(int  start, int   end)</strong>  方法可移除此序列中子字符串中的字符。该子字符串从指定的索引start处开始，一直到索引处<strong>end-1</strong> 处结束，如果end-1超出最大索引范围，则一直到序列尾部</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sbf.delete(<span class="type">int</span> start,<span class="type">int</span> end);   <span class="comment">//end不包含</span></span><br></pre></td></tr></table></figure>
<h2 id="输入输出"><a class="markdownIt-Anchor" href="#输入输出"></a> 输入输出</h2>
<h3 id="读取输入"><a class="markdownIt-Anchor" href="#读取输入"></a> 读取输入</h3>
<p>要想通过控制台进行输入，首先需要构造一个Scanner对象，并与“标准输入流” <a href="http://System.in">System.in</a> 关联</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in)</span><br></pre></td></tr></table></figure>
<ul>
<li>API  java.util.Scanner 5.0</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String <span class="title function_">nextLine</span><span class="params">()</span>;       <span class="comment">//读取输入的下一行内容</span></span><br><span class="line">String <span class="title function_">next</span><span class="params">()</span>;		     <span class="comment">//读取输入的下一个单词（以空格为分隔符）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">nextInt</span><span class="params">()</span>;			 <span class="comment">//读取下一个整数</span></span><br><span class="line">Double <span class="title function_">nextDouble</span><span class="params">()</span>;	 <span class="comment">//读取下一个浮点数</span></span><br><span class="line">Boolean <span class="title function_">hasNext</span><span class="params">()</span>;		 <span class="comment">//检测输入中是否还有其他单词</span></span><br><span class="line">Boolean <span class="title function_">hasNextInt</span><span class="params">()</span>;	 <span class="comment">//检测输入中是否还有表示整数的下一个字符</span></span><br><span class="line">Boolean <span class="title function_">hasNextDouble</span><span class="params">()</span>; <span class="comment">//检测输入中是否还有表示浮点数的下一个字符</span></span><br></pre></td></tr></table></figure>
<h3 id="格式化输出"><a class="markdownIt-Anchor" href="#格式化输出"></a> 格式化输出</h3>
<p>Java SE 5.0 沿用了C语言中的printf方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;%8.2f&quot;</span>,<span class="number">10000.0</span>/<span class="number">3.0</span>)   <span class="comment">//打印一个空格加七个字符  “ 3333.33”</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%,.2f&quot;</span>,<span class="number">10000.0</span>/<span class="number">3.0</span>)   <span class="comment">//逗号标志增加分组的分隔符，打印3,333.33</span></span><br></pre></td></tr></table></figure>
<ul>
<li>用于printf的标志</li>
</ul>
<table>
<thead>
<tr>
<th>标志</th>
<th>目的</th>
<th>举例</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>打印正数和负数的符号</td>
<td>+3333.33</td>
</tr>
<tr>
<td>空格</td>
<td>在正数前面加空格</td>
<td>| 3333.33|</td>
</tr>
<tr>
<td>0</td>
<td>数字前面补0</td>
<td>003333.33</td>
</tr>
<tr>
<td>-</td>
<td>左对齐</td>
<td>|3333.33 |</td>
</tr>
<tr>
<td>（</td>
<td>将负数括在括号里</td>
<td>(3333.33)</td>
</tr>
<tr>
<td>，</td>
<td>添加分组分隔符</td>
<td>3,333.</td>
</tr>
</tbody>
</table>
<h3 id="文件输入与输出"><a class="markdownIt-Anchor" href="#文件输入与输出"></a> 文件输入与输出</h3>
<p>要想对文件进行读取，就需要一个用File对象构造一个Scanner对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scannner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(Paths.get(<span class="string">&quot;myfile.txt&quot;</span>),<span class="string">&quot;UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>要想写入文件，就需要构造一个PrintWrite对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PrintWrite</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWrite</span>(<span class="string">&quot;myfile.txt&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="控制流程"><a class="markdownIt-Anchor" href="#控制流程"></a> 控制流程</h2>
<h3 id="条件语句"><a class="markdownIt-Anchor" href="#条件语句"></a> 条件语句</h3>
<ol>
<li>常见的条件语句格式</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)</span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>			<span class="comment">//else部分可选，且else子句与最邻近的if构成一组</span></span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>switch-case多分支语句后表达式的数据类型包括 <strong>6</strong> 种：<strong>int</strong>， <strong>short</strong>，<strong>char</strong>，<strong>byte</strong>，<strong>String</strong> 和 <strong>enum</strong>（枚举类型），特别注意没有浮点类型</li>
</ol>
<h3 id="循环语句"><a class="markdownIt-Anchor" href="#循环语句"></a> 循环语句</h3>
<p>do/while循环语句可以实现循环体至少执行一次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">	...</span><br><span class="line">&#125;<span class="keyword">while</span>(condition)</span><br></pre></td></tr></table></figure>
<h2 id="大数值"><a class="markdownIt-Anchor" href="#大数值"></a> 大数值</h2>
<p>如果基本的整数和浮点数精度不能够满足需求，可以使用java.math包中的两个类：<strong>BIgInteger</strong> 和 <strong>BigDecimal</strong></p>
<p>BIgInteger类实现了任意精度的整数运算，BIgDecimal实现了任意精度的浮点数运算。</p>
<p>使用静态的valueOf方法可以将普通数值转换为大数值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">a</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure>
<p>不能使用算术运算符（如：+和*）处理大数值，需要使用大数值类中的add和multiply方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BigInteger</span> <span class="variable">c</span> <span class="operator">=</span> a.add(b);                                   <span class="comment">//c=a+b</span></span><br><span class="line"><span class="type">BigInteger</span> <span class="variable">d</span> <span class="operator">=</span> c.multiply(b.add(BigInteger.valueOf(<span class="number">2</span>)));   <span class="comment">//d=c*(b+2)</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>API java.math.BigInteger  1.1</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BigInteger <span class="title function_">add</span><span class="params">(BigInteger other)</span>; </span><br><span class="line">BigInteger <span class="title function_">subtract</span><span class="params">(BigInteger other)</span>; </span><br><span class="line">BigInteger <span class="title function_">multiply</span><span class="params">(BigInteger other)</span>; </span><br><span class="line">BigInteger <span class="title function_">divide</span><span class="params">(BigInteger other)</span>;</span><br><span class="line">BigInteger <span class="title function_">mod</span><span class="params">(BigInteger other)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(BigInteger other)</span>;            <span class="comment">//相等返回0，小于返回负数，否则返回正数</span></span><br></pre></td></tr></table></figure>
<h2 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h2>
<p>Java中将数组看成一个 <strong>对象</strong>，虽然基本数据类型不是对象，但是由基本数据类型组成的数组则是对象。</p>
<h3 id="一维数组"><a class="markdownIt-Anchor" href="#一维数组"></a> 一维数组</h3>
<ol>
<li>创建一维数组</li>
</ol>
<p>​	声明一维数组 的两种方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组元素类型  数组名字[];</span><br><span class="line">数组元素类型[] 数组名字;</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">  <span class="type">int</span> a[];</span><br><span class="line">  <span class="type">int</span>[] a;		<span class="comment">//提倡这种风格，因为它将类型与变量分开了</span></span><br></pre></td></tr></table></figure>
<p>分配内存空间：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组名字 = <span class="keyword">new</span> 数组元素类型[数组元素的个数];</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">  a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure>
<p>将数组的声明和分配内存空间一起执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数组元素类型 数组名 = <span class="keyword">new</span> 数组元素类型[数组元素个数];</span><br><span class="line"> </span><br><span class="line">如：</span><br><span class="line">  <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">12</span>]; </span><br></pre></td></tr></table></figure>
<p>创建一个数字数组时，<strong>所有元素都初始化为 0 ；boolean数组的元素会被初始化为 false ，对象数组的元素会被初始化为一个特殊值 null</strong></p>
<ol start="2">
<li>获取数组长度</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">array.length</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>数组初始化</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] smallPrimes = &#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;   <span class="comment">//方式一：使用这种语句时，不需要调用new</span></span><br><span class="line">smallPrimes = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>&#125;;<span class="comment">//方式二：使用匿名数组</span></span><br></pre></td></tr></table></figure>
<h3 id="for-each语句"><a class="markdownIt-Anchor" href="#for-each语句"></a> for each语句</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(variable : colletion)&#123;	<span class="comment">//colletion表达式必须是一个数组或是一个实现了Iterable接口的类对象</span></span><br><span class="line">	...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//example：</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> element:a)</span><br><span class="line">    System.out.println(element);	<span class="comment">//打印数组a的每一个元素</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>for each循环语句中的循环变量将会遍历数组中的每一个元素，不需要使用下标值。</li>
<li>要打印数组中的所有值，可以调用 <strong>System.out.println(Arrays.toString(b))</strong></li>
</ol>
</blockquote>
<h3 id="命令行数组"><a class="markdownIt-Anchor" href="#命令行数组"></a> 命令行数组</h3>
<p>在每一个Java程序的主方法main()中，都有一个String args[]的字符串数组；这个参数表面main方法将接收一个</p>
<p>字符串数组，也就是命令行参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(args[<span class="number">0</span>].equals(<span class="string">&quot;-h&quot;</span>))</span><br><span class="line">            System.out.print(<span class="string">&quot;Hello,&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(args[<span class="number">0</span>].equals(<span class="string">&quot;-g&quot;</span>))</span><br><span class="line">            System.out.print(<span class="string">&quot;Goodbye&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;args.length;i++)</span><br><span class="line">            System.out.print(<span class="string">&quot; &quot;</span>+args[i]);</span><br><span class="line">        System.out.println(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用命令行形式运行程序：java demo -g cruel world</span></span><br><span class="line"><span class="comment">//程序将输出：Goodbye,cruel world!</span></span><br></pre></td></tr></table></figure>
<h3 id="数组拷贝"><a class="markdownIt-Anchor" href="#数组拷贝"></a> 数组拷贝</h3>
<p>允许将一个数组变量拷贝给另一个数组变量，这时这两个变量将引用同一个数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] nums2 = nums1;</span><br></pre></td></tr></table></figure>
<p>如果希望一个数组的所有值拷贝到另一个数组中，需要使用 <code>Arrays</code> 类中的 <code>copyOf</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] nums2 = Arrays.copyOf(nums1,nums1.length);</span><br></pre></td></tr></table></figure>
<h3 id="多维数组"><a class="markdownIt-Anchor" href="#多维数组"></a> 多维数组</h3>
<p>创建二维数组可以只声明行的长度，而不声明列的长度；如果只声明列的长度而不声明行的长度的话，就属于错误写法。</p>
<p>Java支持不规则的数组，例如二维数组中，不同行的元素个数可以不同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[][] = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">3</span>][];</span><br><span class="line">a[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">5</span>];</span><br><span class="line">a[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">4</span>];</span><br><span class="line">a[<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">其中：</span><br><span class="line">a.length 用以表示二维数组的行数</span><br><span class="line">a[i].length 用以表示二维数组第i行的列数</span><br></pre></td></tr></table></figure>
<h3 id="数组的基本操作"><a class="markdownIt-Anchor" href="#数组的基本操作"></a> 数组的基本操作</h3>
<ol>
<li>遍历数组</li>
</ol>
<p>方式一：过 <strong>for</strong> 循环和数组的 <strong>length</strong> 属性来遍历数组。</p>
<p>方式二：使用 <strong>foreach</strong> 循环语句遍历</p>
<ol start="2">
<li>填充和批量替换数组元素</li>
</ol>
<p>通过<strong>Array</strong>类的静态方法 <strong>fill()</strong> 方法对数组中的元素进行分配，<strong>fill()</strong> 方法可将指定的 int 值分配给 int 型数组的每个元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Array.fill(<span class="type">int</span>[] a , <span class="type">int</span> value);</span><br></pre></td></tr></table></figure>
<ul>
<li>value：要存储数组中所有元素的值</li>
</ul>
<ol start="3">
<li>数组拷贝</li>
</ol>
<p>在Java中，允许将一个数组变量拷贝给另一个数组变量；此时这两个数组变量将引用同一个数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] luckNumbers = smallPrimes;	</span><br></pre></td></tr></table></figure>
<p>要想将一个数组的所有值拷贝到一个新的数组中去，需要使用Arrays类中的copyOf() 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] copiedluckNumbers=Arrays.copyOf(luckNumbers,luckNumbers.length);</span><br></pre></td></tr></table></figure>
<p>第二个参数是新数组的长度，这个方法通常用来增加数组的大小。如果长度大于原始数组长度，多余部分会被赋值为默认值；如果长度小于原始数组长度，则只会拷贝前面的数据元素。</p>
<ol start="4">
<li>数组排序</li>
</ol>
<p>要想对数组进行排序，可以使用 <strong>Arrays</strong> 类中的 <strong>sort</strong> 方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line">...</span><br><span class="line">Arrays.sort(a);</span><br></pre></td></tr></table></figure>
<p>这个方法采用了优化的快速排序算法。</p>
<h1 id="面向对象"><a class="markdownIt-Anchor" href="#面向对象"></a> 面向对象</h1>
<p>面向对象程序设计（ <strong>OOP</strong> ）的特点：</p>
<ol>
<li>封装性</li>
<li>继承性</li>
<li>多态性</li>
</ol>
<h2 id="类与对象"><a class="markdownIt-Anchor" href="#类与对象"></a> 类与对象</h2>
<ol>
<li>类是构造对象的模板。在类之间，最常见的关系有：</li>
</ol>
<ul>
<li>依赖（“users-a”）</li>
<li>聚合（“has-a”）</li>
<li>继承（“is-a”）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 类名称&#123;</span><br><span class="line">	<span class="comment">// 类的成员变量</span></span><br><span class="line">	<span class="comment">// 类的成员方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>对象与对象变量</li>
</ol>
<p>使用构造器构造一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date bitrhday=<span class="keyword">new</span> <span class="title class_">Date</span>();	<span class="comment">//构造一个对象birthday，并对其进行初始化</span></span><br><span class="line">Date deadline;				<span class="comment">//deadline是一个对象变量</span></span><br><span class="line">deadline=bithday;			<span class="comment">//要想使用deadline，必须对其进行初始化，此时deadline并没有包含一个对象，而仅仅是引用一个对象</span></span><br></pre></td></tr></table></figure>
<h3 id="成员变量"><a class="markdownIt-Anchor" href="#成员变量"></a> 成员变量</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型 变量名称 [ = 值 ];</span><br></pre></td></tr></table></figure>
<p>不设置初始值时，成员变量为 <strong>默认值</strong></p>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>byte、short、int、ong</code></td>
<td>0</td>
</tr>
<tr>
<td><code>float、double</code></td>
<td>0.0</td>
</tr>
<tr>
<td><code>char</code></td>
<td>’ ’</td>
</tr>
<tr>
<td><code>boolean</code></td>
<td><strong>false</strong></td>
</tr>
<tr>
<td>引用类型，例如 <code>String</code></td>
<td>null</td>
</tr>
</tbody>
</table>
<h3 id="成员方法"><a class="markdownIt-Anchor" href="#成员方法"></a> 成员方法</h3>
<ol>
<li>成员方法的定义</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[权限修饰符] [返回值类型] 方法名 ( [参数类型 参数名] ) [<span class="keyword">throws</span> 异常类型]&#123;</span><br><span class="line">	……<span class="comment">//方法体</span></span><br><span class="line">	<span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>方法参数</li>
</ol>
<p>很多程序设计语言提供了两种参数传递方式：<code>值调用和引用调用</code>。<strong>Java程序设计语言总是采用<code>按值调用</code></strong>。方法得到的是所有参数值的一个拷贝，特别的是方法不能修改传递给它的任何参数变量的内容。</p>
<p>方法参数共有两种类型：</p>
<ul>
<li>基本数据类型（数字，布尔值）</li>
<li>对象引用</li>
</ul>
<p>方法得到的是对象引用的拷贝，对象引用及其他的拷贝同时引用同一个对象。</p>
<blockquote>
<p>很多程序员认为 Java 程序设计语言对对象采用的是引用调用，但事实上这种理解是不对的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*编写一个雇员交换的方法*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Employee x,Employee y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">temp</span> <span class="operator">=</span> x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果Java采用的是引用调用，那么这个方法就应该能够实现交换数据的效果。但是，方法并没有改变存储在变量中的对象引用。<code>swap()</code>方法交换的是两个对象引用的拷贝。这个过程说明 java 对对象采用的不是引用调用，实际上<strong>对象引用进行的是值传递</strong></p>
</blockquote>
<p>Java 程序设计语言中方法参数的使用情况：</p>
<ul>
<li>一个方法不能修改一个基本数据类型的参数。（即数值型和布尔型）</li>
<li>一个方法可以改变一个对象参数的状态。</li>
<li><strong>一个方法不能让对象参数引用一个新的对象。</strong></li>
</ul>
<ol start="3">
<li>隐式参数与显示参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">raiseSalary</span><span class="params">(<span class="type">double</span> byPercent)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">double</span> <span class="variable">raise</span> <span class="operator">=</span> salary * byPercent / <span class="number">100</span>;</span><br><span class="line">	salary+=raise;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该方法有两个参数，第一个参数为隐式参数，是出现在方法名前的Employee类对象，第二个参数是显式参数</span></span><br></pre></td></tr></table></figure>
<p>在每一个方法中，关键字 <strong>this</strong> 表示隐式参数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">raiseSalary</span><span class="params">(<span class="type">double</span> byPercent)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">double</span> <span class="variable">raise</span> <span class="operator">=</span> <span class="built_in">this</span>.salary * byPercent / <span class="number">100</span>;</span><br><span class="line">	<span class="built_in">this</span>.salary+=raise;		<span class="comment">//这样可以将实例域与局部变量区分开了</span></span><br><span class="line">&#125;   	</span><br></pre></td></tr></table></figure>
<h3 id="局部变量"><a class="markdownIt-Anchor" href="#局部变量"></a> 局部变量</h3>
<p>如果在成员方法内定义一个变量，那么这个变量被称之为局部变量。</p>
<p>局部变量在方法 <strong>执行时被创建</strong> ，在方法执行 <strong>结束时被销毁</strong> 。局部变量在使用时必须进行赋值操作或被初始化</p>
<h2 id="静态域与静态方法"><a class="markdownIt-Anchor" href="#静态域与静态方法"></a> 静态域与静态方法</h2>
<h3 id="静态变量"><a class="markdownIt-Anchor" href="#静态变量"></a> 静态变量</h3>
<p>不同类之间需要对同一个变量进行操作，此变量可作为一个共享变量，该共享变量用 <em><strong>static</strong></em> 修饰，称之为静态变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名.静态类成员</span><br></pre></td></tr></table></figure>
<p>静态变量属于类，不属于任何独立的对象。</p>
<h3 id="静态方法"><a class="markdownIt-Anchor" href="#静态方法"></a> 静态方法</h3>
<p>静态方法不依赖任何对象就还可以直接访问，对于静态方法来说没有 <code>this</code> 关键字。如果想使用类中的成员方法，需要先将这个类实例化，但有时候不想或者无法创建类的对象时，还要调用类中的方法，这样可以使用静态方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名.静态方法();</span><br></pre></td></tr></table></figure>
<p><strong>在静态方法中不能访问类的非静态成员变量和非静态方法。</strong></p>
<p>在下面两种情况使用静态方法：</p>
<ul>
<li>一个方法不需要访问对象状态，其所需参数都是通过显式参数提供（如<code>Math.pow()</code>）</li>
<li>一个方法只需要访问类的静态域</li>
</ul>
<h3 id="静态代码块"><a class="markdownIt-Anchor" href="#静态代码块"></a> 静态代码块</h3>
<p>在类的成员方法之外，用 <code>static</code> 修饰代码区域可以称之为静态代码块。定义一块静态代码块，可以在完成类的初始化操作，在  <strong>类的声明</strong> 时就会运行。</p>
<h3 id="工厂方法"><a class="markdownIt-Anchor" href="#工厂方法"></a> 工厂方法</h3>
<p>静态方法的一种常见用途。使用工厂方法产生不同风格的格式对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">NumberFormat</span> <span class="variable">currencyFormatter</span> <span class="operator">=</span> NumberFormat.getCurrencyInstance();</span><br><span class="line"><span class="type">NumberFormat</span> <span class="variable">percentFormatter</span> <span class="operator">=</span> NumberFormat.getPercentInstance();</span><br><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0.1</span>;</span><br><span class="line">System.out.println(currencyFormatter.format(x));</span><br><span class="line">System.out.println(percentFormatter.format(x));</span><br></pre></td></tr></table></figure>
<h3 id="类的主方法"><a class="markdownIt-Anchor" href="#类的主方法"></a> 类的主方法</h3>
<p>主方法是类的入口点，它指向了程序从何处开始，提供对程序流向的控制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>主方法是静态的，所以如果要在主方法中直接调用其他方法，则该方法必须也是静态的</li>
<li>主方法没有返回值</li>
<li>主方法的形参是数组，其中<code>args[0]~args[n]</code>代表程序的第一个参数到第n+1个参数</li>
</ul>
<h2 id="对象构造"><a class="markdownIt-Anchor" href="#对象构造"></a> 对象构造</h2>
<h3 id="重载"><a class="markdownIt-Anchor" href="#重载"></a> 重载</h3>
<p>多个方法有相同的名字，不同的参数，便产生了重载。编译器通过用各个方法给出的参数类型与特定方法调用所使用的值类型进行匹配来挑选出相应的方法。</p>
<blockquote>
<p>不能有两个名字相同，参数类型也相同，却返回不同类型值的方法。</p>
</blockquote>
<h3 id="无参数构造器"><a class="markdownIt-Anchor" href="#无参数构造器"></a> 无参数构造器</h3>
<p>如果在编写一个类时没有编写构造器，那么系统就会提供一个无参数构造器。这个构造器将所有的实例域设置为默认值：数值型数据设置为 <strong>0</strong> ，布尔型数据设置为 <strong>false</strong> ，对象变量设置为 <strong>null</strong></p>
<p>如果类中提供了至少一个构造器，但是没有提供无参数构造器，则在构造对象时如果没有提供参数就会被视为不合法。</p>
<blockquote>
<p>仅当类没有提供任何构造器的时候，系统才会提供一个默认的构造器。</p>
</blockquote>
<h3 id="调用另一个构造器"><a class="markdownIt-Anchor" href="#调用另一个构造器"></a> 调用另一个构造器</h3>
<p>关键字  <code>this</code>  引用方法的隐式参数。</p>
<p><code>this</code>  关键字的另一含义： 如果构造器的第一个语句形如 <code>this(...)</code>  ，这个构造器将调用同一个类的另一个构造器，这样对公共的构造器代码部分只编写一次即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">double</span> s)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="string">&quot;employee #&quot;</span>+nextId,s);		<span class="comment">//调用Employee(String,double)构造器</span></span><br><span class="line">    nextId++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="初始化块"><a class="markdownIt-Anchor" href="#初始化块"></a> 初始化块</h3>
<p>初始化数据域的方法：</p>
<ul>
<li>在构造器中设置值</li>
<li>在声明中赋值</li>
<li>初始化块</li>
</ul>
<p>在一个类的声明中，可以包含多个代码块。<strong>只要构造类的对象，这些块就会被执行。</strong></p>
<h3 id="对象析构与finalize方法"><a class="markdownIt-Anchor" href="#对象析构与finalize方法"></a> 对象析构与finalize方法</h3>
<p>Java有自动的垃圾回收器，不需要人工回收内存，所以Java不支持析构器。当对象使用了内存之外的其他资源，当资源不再需要时，需要将其回收。可以为任意一个类添加 <code>finalize</code> 方法，<code>finalize</code>方法将在垃圾回收器清除对象之前调用。</p>
<h2 id="包"><a class="markdownIt-Anchor" href="#包"></a> 包</h2>
<p>借助包可以方便地组织自己的代码，并将自己的代码与别人提供地代码库分开管理。</p>
<p>使用包的主要原因是确保类名的唯一性。</p>
<h3 id="类的导入"><a class="markdownIt-Anchor" href="#类的导入"></a> 类的导入</h3>
<p>一个类可以使用所属包中的所有类，以及其他包中的公有类（public class）。可以采用两种方式访问另一个包中的公共包：</p>
<ol>
<li>在每个类名之前添加完整的包名</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.<span class="type">Date</span> <span class="variable">today</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Date();</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>可以使用 <code>import</code> 语句导入一个特定的类或整个包。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br></pre></td></tr></table></figure>
<h3 id="将类放入包中"><a class="markdownIt-Anchor" href="#将类放入包中"></a> 将类放入包中</h3>
<p>如果没有在源文件中放置<code>packge</code>语句，这个源文件中的类就会被放置在一个默认包中（default  package）。默认包是一个没有名字的包。</p>
<h3 id="包作用域"><a class="markdownIt-Anchor" href="#包作用域"></a> 包作用域</h3>
<p>标记为 <code>public</code> 的部分可以被任意的类使用；标记为 <code>private</code> 的部分只能被定义它们的类使用。如果没有指定 <code>public</code> 和 <code>private</code> ，这个部分（类，方法或变量）可以被同一个包中的所有方法访问。</p>
<h2 id="文档注释"><a class="markdownIt-Anchor" href="#文档注释"></a> 文档注释</h2>
<h3 id="注释的插入"><a class="markdownIt-Anchor" href="#注释的插入"></a> 注释的插入</h3>
<p>javadoc实用程序从下面几个特性中抽取信息：</p>
<ul>
<li>包</li>
<li>公有类与接口</li>
<li>共有的和受保护的构造器及方法</li>
<li>公有的和受保护的域</li>
</ul>
<p>应该为这几部分编写注释，注释以<code>/**</code>开始，并以<code>*/</code>结束</p>
<h3 id="方法注释"><a class="markdownIt-Anchor" href="#方法注释"></a> 方法注释</h3>
<p>每一个方法注释必须放在所描述的方法之前。</p>
<ul>
<li>**@param **变量描述</li>
<li><strong>@return</strong> 描述</li>
<li><strong>@throw</strong> 类描述</li>
</ul>
<h3 id="通用注释"><a class="markdownIt-Anchor" href="#通用注释"></a> 通用注释</h3>
<ul>
<li><strong>@author</strong> 姓名</li>
<li><strong>@version</strong> 版本</li>
</ul>
<h1 id="继承"><a class="markdownIt-Anchor" href="#继承"></a> 继承</h1>
<h2 id="类超类和子类"><a class="markdownIt-Anchor" href="#类超类和子类"></a> 类，超类和子类</h2>
<p>已存在的类称为超类，父类或基类；新类称为子类，派生类或孩子类。</p>
<ol>
<li><code>extends</code> 关键字</li>
</ol>
<p>在 Java 中，让一个类继承另一个类需要使用 <code>extends</code> 关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Child <span class="keyword">extends</span> <span class="title class_">Parents</span></span><br></pre></td></tr></table></figure>
<ul>
<li>Java 只支持单继承，即 <strong>一个类只可以有一个父类</strong>，且所有的继承都是公有继承</li>
</ul>
<p>2.方法的重写</p>
<p>当父类中的某个方法并不适用于子类时，就需要在子类中重写父类的这个方法。</p>
<p>重写就是在子类中将父类的成员方法名称保留，重新编写父类成员方法的实现内容，更改成员方法的存储权限或者修改成员方法的返回值类型</p>
<blockquote>
<p>当重写父类方法时，修改方法的修饰权限只能 <strong>从小范围到大范围</strong> 改变</p>
</blockquote>
<ol start="3">
<li><code>super</code> 关键字</li>
</ol>
<ul>
<li>子类重写了父类的方法后需要调用父类的方法，需要用到 <strong><code>super</code></strong> 关键字，<strong><code>super</code></strong> 代表父类对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">super</span>.property; <span class="comment">//调用父类的属性</span></span><br><span class="line"><span class="built_in">super</span>.method(); <span class="comment">//调用父类的方法</span></span><br></pre></td></tr></table></figure>
<ul>
<li>调用超类的构造器</li>
</ul>
<h3 id="多态"><a class="markdownIt-Anchor" href="#多态"></a> 多态</h3>
<p>在Java中，多态的含义是”一种定义，多种实现“。 类的多态可以从两方面体现：一是方法的重载，二是类的上下转型</p>
<ol>
<li>方法的重载</li>
</ol>
<p>方法的重载就是在同一个类中存在多个同名方法，只要这些方法的参数个数或者类型不同即可</p>
<ol start="2">
<li>向上转型</li>
</ol>
<p>把子类对象赋值给父类类型的对象</p>
<ol start="3">
<li>向下转型</li>
</ol>
<p>将父类对象强制转换为子类对象（显示类型转换）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Quadrangle</span> <span class="variable">q</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Parallelogram</span>();</span><br><span class="line"><span class="type">Parallelogram</span> <span class="variable">p</span> <span class="operator">=</span> (Parallelogram) q; <span class="comment">//将父类对象赋予子类对象，并强制转换为子类型</span></span><br></pre></td></tr></table></figure>
<ol start="4">
<li><code>instanceof</code> 关键字</li>
</ol>
<p>在程序执行向下转换操作时，如果父类对象不是子类的实例，就会发生ClassCastException异常，所以在执行向下转型之前需要使用 <code>instanceof</code> 关键字判断父类对象是否为子类的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">myobject <span class="keyword">instanceof</span> ExampleClass	<span class="comment">//返回值为布尔型</span></span><br></pre></td></tr></table></figure>
<ul>
<li>myobject：某类的对象引用</li>
<li>ExampleClass：某个类</li>
</ul>
<h3 id="阻止继承final类和方法"><a class="markdownIt-Anchor" href="#阻止继承final类和方法"></a> 阻止继承：final类和方法</h3>
<p>不允许扩展的类被称为 <strong>final</strong> 类。类中的特定方法也可以被声明为 <strong>final</strong> 。这样子类就不能覆盖这个方法。（<strong>final 类中的所有方法自动地成为 final 方法</strong>）将方法或类声明为 final 主要的目的是：确保它们不会在子类中改变语义。被final修饰的类，方法，变量不能被改变。</p>
<ol>
<li>final 类</li>
</ol>
<p>被 final 修饰的类不能 <strong>被继承</strong> 。当把某个类设置为final 类时，类中的所有方法都隐式的被设置为 final 形式，但是 final 类中的成员变量即可以定义为 final 形式，也可以定义为非 final 形式</p>
<ol start="2">
<li>final方法</li>
</ol>
<p>被 final 修饰的方法不能被 <strong>重写</strong> 。一个定义为 <code>private</code> 的方法隐式的被指定为final类型</p>
<ol start="3">
<li>final变量</li>
</ol>
<p>final 修饰的变量不能被修改，也称为常量。final 修饰的变量必须在声明时对其进行赋值操作</p>
<h3 id="抽象类与抽象方法"><a class="markdownIt-Anchor" href="#抽象类与抽象方法"></a> 抽象类与抽象方法</h3>
<p>在Java中，<strong>抽象类不能产生对象实例</strong> 。定义抽象类时，需要使用 <code>abstract</code> 关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*抽象类*/</span></span><br><span class="line">[权限修饰符] <span class="keyword">abstract</span> 类名&#123;</span><br><span class="line">类体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*抽象方法*/</span></span><br><span class="line">[权限修饰符] <span class="keyword">abstract</span> 方法返回值类型 方法名(参数列表);</span><br><span class="line"></span><br><span class="line"><span class="comment">//以下以person类为例</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String n)</span></span><br><span class="line">    &#123;</span><br><span class="line">        name = n;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getDescription</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>抽象方法本身没有任何意义，除非被重写。<strong>抽象类除了被继承外没有任何意义</strong>，继承抽象类的所有子类都需要重写抽象类中的抽象方法。</p>
<blockquote>
<p><strong>构造方法不能定义为抽象方法</strong></p>
</blockquote>
<h3 id="访问控制"><a class="markdownIt-Anchor" href="#访问控制"></a> 访问控制</h3>
<p>java用于控制可见性的4个访问修饰符：</p>
<ol>
<li>仅本类可见——<code>private</code></li>
<li>对所有类可见——<code>public</code></li>
<li>对本包和所有子类可见——<code>protected</code></li>
<li>对本包可见——默认</li>
</ol>
<table>
<thead>
<tr>
<th></th>
<th>public</th>
<th>protected</th>
<th>default（缺省）</th>
<th>private</th>
</tr>
</thead>
<tbody>
<tr>
<td>本类</td>
<td>可见</td>
<td>可见</td>
<td>可见</td>
<td>可见</td>
</tr>
<tr>
<td>本类所在的包</td>
<td>可见</td>
<td>可见</td>
<td>可见</td>
<td>不可见</td>
</tr>
<tr>
<td>其他包的子类</td>
<td>可见</td>
<td>可见</td>
<td>不可见</td>
<td>不可见</td>
</tr>
<tr>
<td>其他包的非子类</td>
<td>可见</td>
<td>不可见</td>
<td>不可见</td>
<td>不可见</td>
</tr>
</tbody>
</table>
<h3 id="接口的声明及实现"><a class="markdownIt-Anchor" href="#接口的声明及实现"></a> 接口的声明及实现</h3>
<p>接口是抽象类的延伸，接口中的所有方法都没有方法体。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] interface 接口名 [extends 父接口列表]&#123;</span><br><span class="line">	[<span class="keyword">public</span>] [<span class="keyword">static</span>] [<span class="keyword">final</span>] 常量;</span><br><span class="line">	[<span class="keyword">public</span>] [<span class="keyword">abstract</span>] 方法;  <span class="comment">//接口中的方法都是抽象方法，没有方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一个类实现一个接口可以使用implements 关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parallelogram</span> <span class="keyword">implements</span> <span class="title class_">drawTest</span>&#123;</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在接口中定义的任何变量都是自动是final和static的，因此在接口定义变量时，必须进行初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.imageio.stream.ImageInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">drawImage</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">drawImage</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;画矩形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">implements</span> <span class="title class_">drawImage</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;画正方形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Diamond</span> <span class="keyword">implements</span> <span class="title class_">drawImage</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;画菱形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpecialParallelogram</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        drawImage[] images = &#123;<span class="keyword">new</span> <span class="title class_">Rectangle</span>(),<span class="keyword">new</span> <span class="title class_">Square</span>(),<span class="keyword">new</span> <span class="title class_">Diamond</span>()&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;images.length;i++)</span><br><span class="line">            images[i].draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多重继承"><a class="markdownIt-Anchor" href="#多重继承"></a> 多重继承</h3>
<p>在 Java 中不允许多重继承，但使用接口可以实现多重继承，因为一个类可以实现多个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ass 类名 implements 接口<span class="number">1</span>，接口<span class="number">2</span>，……，接口n</span><br></pre></td></tr></table></figure>
<ul>
<li>抽象类与接口的区别</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">比较项</th>
<th style="text-align:left">抽象类</th>
<th style="text-align:left">接口</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">方法</td>
<td style="text-align:left">可以有非抽象方法</td>
<td style="text-align:left">所有方法都是抽象方法</td>
</tr>
<tr>
<td style="text-align:center">属性</td>
<td style="text-align:left">属性可以有非静态常量</td>
<td style="text-align:left">所有属性都是静态常量</td>
</tr>
<tr>
<td style="text-align:center">构造方法</td>
<td style="text-align:left">有构造方法</td>
<td style="text-align:left">没有构造方法</td>
</tr>
<tr>
<td style="text-align:center">继承</td>
<td style="text-align:left">一个类只能继承一个父类</td>
<td style="text-align:left">一个类可以同时实现多个接口</td>
</tr>
<tr>
<td style="text-align:center">被继承</td>
<td style="text-align:left">一个类只能继承一个父类</td>
<td style="text-align:left">一个类可以同时实现多个接口</td>
</tr>
</tbody>
</table>
<h2 id="所有类的父类object"><a class="markdownIt-Anchor" href="#所有类的父类object"></a> 所有类的父类——Object</h2>
<p>Object类是Java所有类的始祖，在Java中每个类都是由它扩展而来。</p>
<p>可以使用Object类型的变量引用任何类型的对象：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Harry Hacker&quot;</span>,<span class="number">35000</span>);</span><br></pre></td></tr></table></figure>
<p>Object类型的变量只能作为各种值的通用持有者，要想对其中的内容进行具体的操作，<strong>还需要进行相应的类型转换</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> (Employee) obj;</span><br></pre></td></tr></table></figure>
<p><strong>所有的数组类型，不管是对象数组还是基本类型数组都扩展了Object类。</strong></p>
<p>在Object类中主要包括 <code>clone()</code> 、<code>finalize()</code>、 <code>equals()</code> 、 <code>toString()</code> 等方法，其中常用的两个方法为 <code>equals()</code> 、 <code>toString()</code> 方法。由于所以的类都是Object类的子类，所以任何类都可以重写Object类中的方法</p>
<blockquote>
<p>Object类中的 <code>getClass()</code>、  <code>notify()</code>、  <code>notifyAll()</code>、 <code>wait()</code>  等方法不能被重写，因为这些方法被定义为 <strong>final</strong> 类型</p>
</blockquote>
<h3 id="equals-方法"><a class="markdownIt-Anchor" href="#equals-方法"></a> equals() 方法</h3>
<p>Object类中的<code>equals()</code> 方法用于检测一个对象是否等于另一个对象。在Object类中的，<code>equals()</code> 方法比较的是两个对象的引用是否相等，如果两个对象具有相同的引用，它们一定是相等的。然而经常需要检测两个对象状态的相等性，如果两个对象的状态相等，就认为这两个对象是相等的。</p>
<p>编写一个完美的 <code>equals</code> 方法：</p>
<ol>
<li>显示参数命名为otherObject，稍后需要将它转换成另一个叫做other的变量。</li>
<li>检测 this 与 otherObject是否引用同一个对象：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> == otherObject)  <span class="keyword">return</span> <span class="literal">true</span>;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>检测otherObject是否为null，如果为null，返回false。这项检测很有必要。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (otherObject == <span class="literal">null</span>)` <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>比较this与otherObject是否属于同一个类。如果 equals 的语句在每个子类中有所改变，就使用 <code>getClass</code> 检测：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(getClass() != otherObject.getClass())  <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<p>如果所有子类都拥有统一的语义，就是用 <code>instanceof</code> 检测：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(otherObject <span class="keyword">instanceof</span> ClassName))	 <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>将otherObject转换为相应的类类型变量：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ClassName</span> <span class="variable">other</span> <span class="operator">=</span> (ClassName)otherObject;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>对所有需要比较的域进行比较：使用 <code>==</code> 比较基本数据类型，使用 <code>equals</code> 比较对象域</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> field1 == other.field1</span><br><span class="line">	&amp;&amp;Objects.equals(field2,other.field2) </span><br><span class="line">	&amp;&amp;...</span><br></pre></td></tr></table></figure>
<h3 id="hashcode方法"><a class="markdownIt-Anchor" href="#hashcode方法"></a> HashCode方法</h3>
<p>散列码是由对象导出的一个整型值，每个对象都有一个默认的散列码，其值为对象的存储地址。Equals与hashCode的定义必须一致。</p>
<h3 id="tostring-方法"><a class="markdownIt-Anchor" href="#tostring-方法"></a> toString() 方法</h3>
<p><code>toString()</code> 方法会返回某个对象的字符串表示形式。绝大多数 <code>toString()</code>都遵循这样的格式：类的名字，随后是一对方括号括起来的域值。</p>
<p>当打印某个对象时，或只要某个对象与一个字符串通过操作符 ”+“ 连接起来时，Java编译器将自动调用重写的 <code>toString()</code> 方法以便获得这个对象的字符串描述。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Point</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;The current position is &quot;</span> + p;</span><br></pre></td></tr></table></figure>
<p>数组 <code>toString</code> 方法的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] nums = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br><span class="line"><span class="comment">// 将打印字符串  [1, 2, 3, 4, 5, 6] </span></span><br></pre></td></tr></table></figure>
<h2 id="泛型数组列表"><a class="markdownIt-Anchor" href="#泛型数组列表"></a> 泛型数组列表</h2>
<p>在许多程序设计语言中，必须在编译时就确定整个数组的大小。在Java中，它允许在运行时确定数组大小。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">actualSize</span> <span class="operator">=</span> ...;</span><br><span class="line">Employee[] staff = <span class="keyword">new</span> <span class="title class_">Employee</span>[actualSize];</span><br><span class="line"><span class="comment">//这段代码并没有完全解决运行时动态更改数组的问题。一旦确定了数组大小，不能轻易改变。解决这个问题最简单的方法是使用ArrayList类</span></span><br><span class="line">ArrayList&lt;Employee&gt; staff = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
<p>ArrayList是一个采用类型参数的泛型类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;T&gt;()						<span class="comment">//构造一个空数组列表</span></span><br><span class="line">ArrayList&lt;T&gt;(<span class="type">int</span> initialCapacity)	<span class="comment">//用指定容量构造一个空数组列表</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(T obj)</span>					<span class="comment">//在数组列表尾端添加一个元素。永远返回true</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>							<span class="comment">//返回存储在数组列表中当前元素的数量</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">trimToSize</span><span class="params">()</span>					<span class="comment">//将数组列表的存储容量削尖到当前尺寸</span></span><br></pre></td></tr></table></figure>
<h3 id="访问数组列表元素"><a class="markdownIt-Anchor" href="#访问数组列表元素"></a> 访问数组列表元素</h3>
<p>ArrayList 使用 get 和 set 方法实现访问或改变数组元素的操作。</p>
<p>要设置第 i 个元素，可以使用：</p>
<p><code>staff.set(i,harry)</code>               它等价于对数组a的元素赋值：<code>a[i]=harry</code></p>
<blockquote>
<p>使用 add 方法为数组添加新元素，而不要使用 set 方法，他只能替换数组中已经存在的元素内容</p>
</blockquote>
<p>获得数组列表的元素：</p>
<p><code>Employee e = staff.get(i)</code>    等价于：<code>Employee e = a[i]</code></p>
<p>下面这个技巧可以一举两得，既可以灵活地扩展数组，又可以方便地访问数组元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//首先创建一个数组，并添加所有的元素</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span>(...)</span><br><span class="line">&#123;</span><br><span class="line">    x = ...;</span><br><span class="line">    list.add(x)；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用toArray方法将数组元素拷贝到一个数组中</span></span><br><span class="line">X[] a = <span class="keyword">new</span> <span class="title class_">X</span>[list.size()];</span><br><span class="line">list.toArray(a);</span><br></pre></td></tr></table></figure>
<ul>
<li>java.util.ArrayList&lt;T&gt; 1.2</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index,T obj)</span></span><br><span class="line">T <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index,T obj)</span>       <span class="comment">//向后移动元素，以便插入元素</span></span><br><span class="line">T <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>				<span class="comment">//删除元素，并将后面的元素向前移动</span></span><br></pre></td></tr></table></figure>
<h2 id="对象包装器与自动装箱"><a class="markdownIt-Anchor" href="#对象包装器与自动装箱"></a> 对象包装器与自动装箱</h2>
<p>所有的基本类型都有一个与之对应的类，这些类称为包装器： <strong>Integer,Long,Double,Short,Byte,Character,Void</strong> 和 <strong>Boolean</strong>（前6个类派生于公共的超类 Number）</p>
<table>
<thead>
<tr>
<th>基本数据类型</th>
<th>对应的包装类</th>
<th>基本数据类型</th>
<th>对应的包装类</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>Byte</td>
<td>short</td>
<td>Short</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody>
</table>
<p>对象包装器类是不可变的，即一旦构造了包装器，就不允许更改包装在其中的值，同时对象包装器类还是 <strong>final</strong> ，因此不能定义他们的子类。</p>
<p><code>list.add(3)</code> 将自动地变换成 <code>list.add(Integer.valueOf(3))</code> 这种变换被称为自动装箱。相反地将Integer对象赋给一个int值时，将会自动地拆箱。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*java.lang.Integer 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span>							<span class="comment">//以int的形式返回Integer对象的值</span></span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">int</span> i)</span>			<span class="comment">//以一个新String对象的形式返回给定数值i的十进制表示</span></span><br><span class="line"><span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> radix)</span>	<span class="comment">//返回数值i的基于给定radix参数进制的表示</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(Stringh s)</span>			<span class="comment">//返回字符串s表示的十进制整型数值</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">parseInt</span><span class="params">(Stringh s,<span class="type">int</span> radix)</span><span class="comment">//返回字符串s表示的radix进制整型数值  </span></span><br><span class="line"><span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(String s)</span>		<span class="comment">//返回s表示的十进制整型数值进行初始化的一个新Integer对象</span></span><br><span class="line"><span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(String s)</span>		<span class="comment">//返回s表示的radix进制整型数值进行初始化的一个新Integer对象</span></span><br></pre></td></tr></table></figure>
<p><strong>Integer</strong> 提供了4个常量：</p>
<ul>
<li>[x] MAX_VALUE：表示int类型可取的最大值，即2<sup>31</sup> -1</li>
<li>[x] MIN_VALUE：表示int类型可取的最小值，即-2<sup>31</sup></li>
<li>[x] SIZE：用来以二进制补码形式表示int值的位数</li>
<li>[x] TYPE：表示基本类型int的Class实例</li>
</ul>
<h2 id="参数数量可变的方法"><a class="markdownIt-Anchor" href="#参数数量可变的方法"></a> 参数数量可变的方法</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">system.out.printf(<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*printf的定义如下：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStrem</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> PrintStrem <span class="title function_">printf</span><span class="params">(String fmt,Object... args)</span></span><br><span class="line">    &#123;       <span class="comment">//这里的...是Java代码的一部分，它表明这个方法可以接收任意数量的对象</span></span><br><span class="line">        <span class="keyword">return</span> format(fmt,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用户可以定义可变参数的方法，并将参数指定为任意类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算若干数值的最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span>... values)</span>	</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">largest</span> <span class="operator">=</span> Double.MIN_VALUE;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">double</span> v:values)</span><br><span class="line">    	<span class="keyword">if</span>(v&gt;largest) largest=v;</span><br><span class="line">   	<span class="keyword">return</span> largest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用这个方法</span></span><br><span class="line"><span class="type">double</span> <span class="variable">m</span> <span class="operator">=</span> max(<span class="number">3.1</span>,<span class="number">40.4</span>,-<span class="number">5</span>)		<span class="comment">//编译器将new double[]&#123;3.1,40.4,-5&#125;传递给max方法</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>允许将一个数组传递给可变参数方法的最后一个参数</p>
</blockquote>
<h2 id="常用类和枚举类型"><a class="markdownIt-Anchor" href="#常用类和枚举类型"></a> 常用类和枚举类型</h2>
<h3 id="math-类"><a class="markdownIt-Anchor" href="#math-类"></a> Math 类</h3>
<p>Math类中包括许多数学方法，如取最大值，取最小值，取绝对值，三角函数，指数函数和取整函数等，除此之外，Math类还提供了一些数学常量，如PI、E等。</p>
<p>常用数学运算方法：</p>
<ol>
<li>指数函数方法</li>
</ol>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>exp(double a)</td>
<td>double</td>
<td>用于获取e的a次方</td>
</tr>
<tr>
<td>double log(double a)</td>
<td>double</td>
<td>用于取自然对数</td>
</tr>
<tr>
<td>double log10(double a)</td>
<td>double</td>
<td>用于取底数为10的对数</td>
</tr>
<tr>
<td>sqrt(double a)</td>
<td>double</td>
<td>用于取a的平方根</td>
</tr>
<tr>
<td>abrt(double a)</td>
<td>double</td>
<td>用于取a的立方根</td>
</tr>
<tr>
<td>pow(double a, double b)</td>
<td>double</td>
<td>用去取a的b次方</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>取整函数方法</li>
</ol>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>ceil(double a)</td>
<td>double</td>
<td>返回大于或等于参数的最小整数</td>
</tr>
<tr>
<td>floor(double a)</td>
<td>double</td>
<td>返回小于或等于参数的最大整数</td>
</tr>
<tr>
<td>rint(double a)</td>
<td>double</td>
<td>返回与参数最接近的整数，如果两个同为整数且相同接近，则结果取偶数</td>
</tr>
<tr>
<td>round(float a)</td>
<td>int</td>
<td>将参数加上0.5后返回小于或等于参数的最大int值</td>
</tr>
<tr>
<td>round(double a)</td>
<td>long</td>
<td>将参数加上0.5后返回小于或等于参数的最大long值</td>
</tr>
</tbody>
</table>
<p><img src="http://qiniu.teksab.cn/img/Java%20EE/Math%E5%8F%96%E6%95%B4%E5%87%BD%E6%95%B0%E7%A4%BA%E4%BE%8B.png" alt="" /></p>
<ol start="3">
<li>取最大值、最小值，绝对值函数方法</li>
</ol>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>max(double a, double b)</td>
<td>double</td>
<td>取a与b之间的最大值</td>
</tr>
<tr>
<td>min(double a, double b)</td>
<td>double</td>
<td>取a与b之间的最大值</td>
</tr>
<tr>
<td>abs(double a)</td>
<td>double</td>
<td>返回参数的绝对值</td>
</tr>
</tbody>
</table>
<h3 id="random类"><a class="markdownIt-Anchor" href="#random类"></a> Random类</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>nextInt()</td>
<td>int</td>
<td>返回一个随机int值</td>
</tr>
<tr>
<td>nextInt(int n)</td>
<td>int</td>
<td>返回一个大于等于0，小于n的随机数</td>
</tr>
<tr>
<td>nextLong()</td>
<td>long</td>
<td>返回一个随机long值</td>
</tr>
<tr>
<td>nextBoolean()</td>
<td>boolean</td>
<td>返回一个随机boolean值</td>
</tr>
<tr>
<td>nextFloat()</td>
<td>float</td>
<td>返回一个随机float值</td>
</tr>
<tr>
<td>nextDouble()</td>
<td>double</td>
<td>返回一个随机double值</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*模拟微信抢红包*/</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedBags</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;***模拟微信抢红包***&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入红包总金额：&quot;</span>);</span><br><span class="line">        <span class="type">double</span> totalMoney=sc.nextDouble();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入红包个数：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> bagsNum=sc.nextInt();</span><br><span class="line">        <span class="type">double</span> minMoney=<span class="number">0.01</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">if</span>(totalMoney/bagsNum==<span class="number">0.01</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;bagsNum;i++)&#123;</span><br><span class="line">                <span class="type">double</span> money=minMoney;</span><br><span class="line">                totalMoney-=money;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;红包：&quot;</span>+String.format(<span class="string">&quot;%.2f&quot;</span>,money)+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(totalMoney/bagsNum&lt;=<span class="number">0.01</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;要保证每个人都能分到一分钱哦！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;bagsNum;i++)&#123;</span><br><span class="line">                <span class="type">double</span> maxMoney=totalMoney-(bagsNum-i)*minMoney;</span><br><span class="line">                <span class="type">double</span> bound=maxMoney-minMoney;  <span class="comment">//设置随机金额的取值范围</span></span><br><span class="line">                <span class="type">double</span> randomMoney=(<span class="type">double</span>) random.nextInt((<span class="type">int</span>) (bound*<span class="number">100</span>))/<span class="number">100</span>;</span><br><span class="line">                <span class="type">double</span> money=minMoney+randomMoney;</span><br><span class="line">                totalMoney-=money;</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span>+i+<span class="string">&quot;红包：&quot;</span>+String.format(<span class="string">&quot;%.2f&quot;</span>,money)+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;第&quot;</span>+bagsNum+<span class="string">&quot;红包：&quot;</span>+String.format(<span class="string">&quot;%.2f&quot;</span>,totalMoney)+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="date-类"><a class="markdownIt-Anchor" href="#date-类"></a> Date 类</h3>
<table>
<thead>
<tr>
<th>方法</th>
<th>返回值</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>after(Date when)</td>
<td>boolean</td>
<td>测试当前日期是否在指定的日期之后</td>
</tr>
<tr>
<td>before(Date when)</td>
<td>boolean</td>
<td>测试当前日期是否在指定的日期之前</td>
</tr>
<tr>
<td>getTime()</td>
<td>long</td>
<td>获得自1970年1月1日 00:00:00 GMT开始到现在所表示的毫秒数</td>
</tr>
<tr>
<td>setTime(long time)</td>
<td>long</td>
<td>设置当前Date对象所表示的日期时间值，该值用以表示1970年1月1日 00:00:00 GMT以后time毫秒的时间点</td>
</tr>
</tbody>
</table>
<p>使用DateFormat类可以定义日期，时间格式。由于DateFormat类是抽象类，因此需要使用DateFormat类的静态方法getDateInstance()创建DateFormat类对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DateFormat</span> <span class="variable">df</span> <span class="operator">=</span> DateFormat.getDateInstance();</span><br></pre></td></tr></table></figure>
<h3 id="枚举类型"><a class="markdownIt-Anchor" href="#枚举类型"></a> 枚举类型</h3>
<p>枚举类型常被用于设置常量。</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Constants&#123;</span><br><span class="line">	Constants_A,Constants_B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在程序中可以通过Constants.Constants_A的方式使用枚举类型的常量。</p>
<p>所有的枚举类型都是Enum类的子类，他们继承这个类的许多方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">java.lang.Enum&lt;E&gt; 5.0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">static</span> Enum <span class="title function_">valueOf</span><span class="params">(Class enumClass,String name)</span><span class="comment">//返回指定名字，给定类的枚举常量</span></span><br><span class="line">String <span class="title function_">toString</span><span class="params">()</span>								<span class="comment">//返回枚举常量名</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ordinal</span><span class="params">()</span>									<span class="comment">//返回枚举常量在enum声明的位置，位置从0开始计数</span></span><br></pre></td></tr></table></figure>
<h2 id="反射"><a class="markdownIt-Anchor" href="#反射"></a> 反射</h2>
<p>能够分析类能力的程序称为反射。反射机制可以用来：</p>
<ul>
<li>在运行时分析类的能力</li>
<li>在运行时查看对象，例如，编写一个toString方法供所有类使用</li>
<li>实现通用的数组操作代码</li>
<li>利用Methon对象，这个对象很像C++中的函数指针</li>
</ul>
<h1 id="接口与内部类"><a class="markdownIt-Anchor" href="#接口与内部类"></a> 接口与内部类</h1>
<p>接口技术主要用来描述类具有什么功能，而并不给出每个功能的具体实现。对象的克隆是指创建一个新对象，且新对象的状态和原始对象的状态相同；当对新对象进行修改时，不会影响原对象的状态。</p>
<h2 id="接口"><a class="markdownIt-Anchor" href="#接口"></a> 接口</h2>
<p>在 Java 程序设计语言中，接口不是类，而是对类的一组需求描述，这些类要遵从接口描述的统一格式进行定义。</p>
<p><strong>接口中的所有方法自动地属于</strong> <strong>public</strong> ，因此在接口声明方法时，不必提供关键字 public，但在实现接口的某个类中，必须把方法声明为 public。</p>
<p>为了让类实现一个接口，通常需要下面两个步骤：</p>
<ol>
<li>将类声明为实现给定的接口</li>
<li>对接口中的所有方法进行定义</li>
</ol>
<p>要将类声明为实现某个接口，需要关键字 <code>implements</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Emoployee</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span></span><br></pre></td></tr></table></figure>
<h3 id="接口的特性"><a class="markdownIt-Anchor" href="#接口的特性"></a> 接口的特性</h3>
<p><strong>接口不能含有实例域</strong>，<strong>接口不是类，也不能使用 <code>new</code> 运算符实例化一个接口</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x = <span class="keyword">new</span> <span class="title class_">Comparable</span>(...);</span><br></pre></td></tr></table></figure>
<p>可以声明接口的变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Comparable x;</span><br><span class="line">x = <span class="keyword">new</span> <span class="title class_">Employee</span>(...);</span><br></pre></td></tr></table></figure>
<p>接口变量必须是实现类接口的类对象，可以使用 instanceof 检查一个对象是否实现了某个特定的接口:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(anObject <span class="keyword">instanceof</span> Comparable)&#123;...&#125;</span><br></pre></td></tr></table></figure>
<p>与类的继承关系一样，接口也可以被扩展。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Moveable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">move</span><span class="params">(<span class="type">double</span> x,<span class="type">double</span> y)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Powered</span> <span class="keyword">extends</span> <span class="title class_">Moveable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">double</span> <span class="title function_">milesPerGallon</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口与抽象类"><a class="markdownIt-Anchor" href="#接口与抽象类"></a> 接口与抽象类</h3>
<p>每个类只能扩展于一个类。假设Employee类已经扩展于一个类，如Person，他就不能再扩展第二个类了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_">Person</span>,Comparable;	<span class="comment">//错误</span></span><br></pre></td></tr></table></figure>
<p>但每个类可以实现多个接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>;</span><br></pre></td></tr></table></figure>
<p>Java 不支持多继承，但接口可以提供多重继承的大多数好处，同时还能避免多重继承的复杂性和低效性。</p>
<h3 id="对象克隆"><a class="markdownIt-Anchor" href="#对象克隆"></a> 对象克隆</h3>
<p>当拷贝一个变量时，原始变量与拷贝变量引用同一个对象，也就是说改变一个变量所引用的对象将会对另一个变量产生影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">original</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;John Public&quot;</span>,<span class="number">5000</span>);</span><br><span class="line"><span class="type">Employee</span> <span class="variable">copy</span> <span class="operator">=</span> original;</span><br><span class="line">copy.raiseSalary(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>如果创建一个对象的新的 copy，它的最初状态与 original  一样，但以后将可以各自改变各自的状态，那就需要使用 <code>clone</code> 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Employee</span> <span class="variable">copy</span> <span class="operator">=</span> original.clone();</span><br><span class="line">copy.raiseSalary(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>默认的克隆操作是 <strong>浅拷贝</strong>，它并没有克隆包含在对象中的内部对象。（只是将各个域进行对应的拷贝，如果在对象中包含对子对象的引用，拷贝的结果会使得两个域引用同一个子对象，因此原始对象与克隆对象共享这部分信息）如果原始对象与浅克隆对象共享的子对象是不可变的，将不会产生任何问题。（如子对象属于像 String 类这样的不允许改变的类）</p>
<p>然而更常见的情况是子对象可变，因此必须重新定义 clone 方法，以便实现克隆子对象的 <strong>深拷贝</strong>。</p>
<p>对于每一个类，都需要做出下列判断：</p>
<ol>
<li>默认的 clone 方法是否满足要求</li>
<li>默认的 clone 方法是否能够通过调用可变子对象的 clone 得到修补</li>
<li>是否不应该使用 clone</li>
</ol>
<p>实际上，选项 3 是默认的。如果要选择 1 或 2，类必须：</p>
<ol>
<li>实现 Cloneable 接口</li>
<li>使用 public 访问修饰符重新定义 clone 方法</li>
</ol>
<blockquote>
<p>子类只能调用受保护的 clone 方法克隆自己，为此必须重新定义 clone 方法，并将它声明为 public ，这样才能让所有的方法克隆对象</p>
</blockquote>
<p>即使 clone 的默认实现（浅拷贝）能够满足需求，也应该实现 Cloneable 接口，将 clone 重新定义为 public ，并调用 <code>super.clone()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*浅拷贝，只是将这个方法声明为 public */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throw</span> CloneNotSupportedException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Employee) <span class="built_in">super</span>.clone();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*深拷贝*/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throw</span> CloneNotSupportedException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">cloned</span> <span class="operator">=</span> (Employee) <span class="built_in">super</span>.clone();</span><br><span class="line">        cloned.hireDay = (Date) hireDay.clone();	<span class="comment">//为了实现深拷贝，必须克隆所有可变的实例域</span></span><br><span class="line">        <span class="keyword">return</span> cloned;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="接口与回调"><a class="markdownIt-Anchor" href="#接口与回调"></a> 接口与回调</h3>
<p>回调是一种常见的程序设计模式。在这种模式中，可以指定某个特定事件发生时应该采取的动作。例如，可以指定在按下鼠标或选择某个菜单项时应该采取什么行动。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> timer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.Timer;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ActionListener</span> <span class="variable">listener</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TimePrinter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Timer</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>(<span class="number">10000</span>,listener);</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        JOptionPane.showMessageDialog(<span class="literal">null</span>,<span class="string">&quot;Quit program&quot;</span>);</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimePrinter</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent event)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;At the tone, the time is&quot;</span>+now);</span><br><span class="line">        Toolkit.getDefaultToolkit().beep();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="lambda表达式"><a class="markdownIt-Anchor" href="#lambda表达式"></a> lambda表达式</h2>
<p>lambda表达式是一个可传递的代码块，可以在以后执行一次或多次。</p>
<h3 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h3>
<p>参数，箭头(-&gt;)以及一个表达式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(String first,String second)</span><br><span class="line">	-&gt;first.length()-second.length()</span><br></pre></td></tr></table></figure>
<p>如果代码要完成的计算无法放在一个表达式中，可以像写方法一样，把代码放在 <code>&#123;&#125;</code> 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(String first,String second)-&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(first.length()&lt;second.length())	<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(first.length()&gt;second.length())	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="内部类"><a class="markdownIt-Anchor" href="#内部类"></a> 内部类</h2>
<p>内部类是定义在另一个类中的类。使用内部类的原因：</p>
<ul>
<li>内部类方法可以访问该类定义所在的的作用域中的数据，包括私有数据</li>
<li>内部类可以对同一个包中的其他类隐藏</li>
<li>当想要定义一个回调函数且不想白编写大量代码时，使用<code>匿名</code>内部类比较便捷</li>
</ul>
<h3 id="使用内部类访问对象状态"><a class="markdownIt-Anchor" href="#使用内部类访问对象状态"></a> 使用内部类访问对象状态</h3>
<p>内部类既可以访问自身的数据域，也可以访问创建它的外围类对象的数据域。</p>
<p>内部类的对象总有一个隐式引用 outer ，它指向创建它的外部类对象。</p>
<blockquote>
<p>outer 不是 Java 的关键字，只是用它说明内部类中的机制</p>
</blockquote>
<h3 id="内部类的特殊语法规则"><a class="markdownIt-Anchor" href="#内部类的特殊语法规则"></a> 内部类的特殊语法规则</h3>
<p>外围类的引用的表达式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OutClass.<span class="built_in">this</span></span><br></pre></td></tr></table></figure>
<p>内部类构造器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outer.new.InnerClass(construction parameters)</span><br></pre></td></tr></table></figure>
<h3 id="匿名内部类"><a class="markdownIt-Anchor" href="#匿名内部类"></a> 匿名内部类</h3>
<p>加入只需要创建局部内部类的一个对象，就不必命名：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">SuperType</span>(construction parameters)</span><br><span class="line">&#123;</span><br><span class="line">    inner <span class="keyword">class</span> <span class="title class_">methods</span> and data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="静态内部类"><a class="markdownIt-Anchor" href="#静态内部类"></a> 静态内部类</h3>
<p>使用内部类就是为了把一个类隐藏在另一个类的内部，并不需要内部类引用外围对象。为此，可以将内部类声明为static ，以便取消产生的引用。</p>
<h2 id="代理"><a class="markdownIt-Anchor" href="#代理"></a> 代理</h2>
<p>利用代理可以在运行时创建一个实现了一组给定接口的新类。</p>
<h1 id="异常-断言-日志和调试"><a class="markdownIt-Anchor" href="#异常-断言-日志和调试"></a> 异常、断言、日志和调试</h1>
<p>在Java中，异常就是程序运行时产生的错误。如像一个不存在的文本文件写入数据时，就会产生FileNotFoundException异常(系统找不到文件)。</p>
<p>当程序执行到某一方法处产生异常时，JVM就会产生与已产生的异常相匹配的异常对象；如果没有对异常对象做异常处理，那么就会显示异常信息。</p>
<h2 id="处理错误"><a class="markdownIt-Anchor" href="#处理错误"></a> 处理错误</h2>
<p>用户期望在出现错误时，程序能够采用一些理智的行为。如果由于出现错误而使得某些操作没有完成，程序应该：</p>
<ul>
<li>返回到一种安全状态，并能够让用户执行一些其他命令</li>
<li>允许用户保存所有操作的结果，并以适当的方式终止程序</li>
</ul>
<p>异常处理的任务就是将控制权从错误产生的地方转移给能够处理这种情况的错误处理器。</p>
<p>在 Java 中，如果某个方法不能够采用正常的途径完成它的任务，就可以通过另外一个路径退出方法。在这种情况下，方法不返回任何值，而是抛出（throw）一个封装了错误信息的对象。</p>
<h3 id="异常分类"><a class="markdownIt-Anchor" href="#异常分类"></a> 异常分类</h3>
<p>异常对象都是派生于 <strong>Throwable</strong> 类的一个实例。</p>
<p><img src="http://qiniu.teksab.cn/img/Java%20EE/Throwable.png" alt="" /></p>
<p>Error类层次结构描述了 Java 运行时系统内部错误和资源耗尽错误，应用程序不应该出现抛出这样的对象。在这集 Java 程序时，需要关注 Exception 层次结构。</p>
<p>派生于 RuntimeException 的异常包含下面几种情况：</p>
<ul>
<li>错误的类型转换</li>
<li>数组访问越界</li>
<li>访问空指针</li>
</ul>
<p>不是派生 RuntimeException 的异常包括：</p>
<ul>
<li>试图在文件尾部后面读取数据</li>
<li>试图打开一个不存在的文件</li>
<li>试图根据给定的字符串查找 Class 对象，而这个字符串表示的类并不存在</li>
</ul>
<p>Java 语言规范将派生于 Error 类或 RuntimeException类的所有异常称为 <em>未检查异常</em>，所有其他的异常称为 <em>已检查异常</em>。</p>
<h3 id="声明已检查异常"><a class="markdownIt-Anchor" href="#声明已检查异常"></a> 声明已检查异常</h3>
<p>方法应该在其首部声明所有可能抛出的异常，这样可以从首部反映这个方法可能抛出哪类 <em>已检查的异常</em>。</p>
<p>在自己编写方法时，不必将所有可能抛出的异常都进行声明，在以下4种情况应该抛出异常：</p>
<p>1）调用一个抛出已检查异常的方法，例如 FileInputStream 构造器</p>
<p>2）程序运行过程中发现错误，并且利用 throw 语句抛出一个已检查异常</p>
<p>3）程序出现错误</p>
<p>4）Java 虚拟机和运行时库出现的内部错误</p>
<p>总之，一个方法必须声明所有可能抛出的 <em>已检查异常</em>，而未检查异常要么不可控制，要么就应该避免发生。</p>
<h3 id="如何抛出异常"><a class="markdownIt-Anchor" href="#如何抛出异常"></a> 如何抛出异常</h3>
<p>对于一个已经存在的异常类，将其抛出：</p>
<p>1）找到一个合适的异常类</p>
<p>2）创建这个类的一个对象</p>
<p>3）将对象抛出</p>
<ol>
<li>使用 <strong>throws</strong> 关键字抛出异常</li>
</ol>
<p>throws 关键字常被应用于方法上，表示方法可能抛出的异常，当方法抛出多个异常时，可用逗号分隔异常类型名。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">返回值类型 方法名 (参数表) <span class="keyword">throws</span> 异常类型&#123;</span><br><span class="line">	方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>使用 <strong>throw</strong> 关键字抛出异常</li>
</ol>
<p>throw 关键字虽然可以用于抛出Exception类中的子类异常，但重要的用途是抛出自定义异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> 异常类型名(异常信息)</span><br></pre></td></tr></table></figure>
<p>创建自定义异常时，须继承 RuntimeException 类或者 Exception 类</p>
<ol start="3">
<li><strong>throws</strong> 关键字和 <strong>throw</strong> 关键字的区别</li>
</ol>
<p>（1）throws用在方法声明后面，表示抛出异常由方法的调用者处理；而throw用在方法体内，用来制造一个异常，由方法体内的语句处理</p>
<p>（2）throws是声明这个方法会抛出这种类型的异常，以便使它的调用者知道要捕捉这个异常；而throw是直接抛出一个异常实例</p>
<p>（3）throws表示出现异常的一种可能性，并不一定会产生这些异常；但如果使用throw，就一定会产生某种异常</p>
<h3 id="创建异常类"><a class="markdownIt-Anchor" href="#创建异常类"></a> 创建异常类</h3>
<p>在程序中，有时候会遇到任何标准异常类型都没有能够充分地描述清楚的问题，这个时候可以创建自己的异常类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">FileFormatException</span> <span class="keyword">extends</span> <span class="title class_">IOException</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileFormatException</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileFormatException</span><span class="params">(String gripe)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>(gripe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="捕获异常"><a class="markdownIt-Anchor" href="#捕获异常"></a> 捕获异常</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 程序代码块</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>  (Exceptiontype e)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 对Exceptiontype的处理</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<blockquote>
<p>try中的”程序代码块“指的是可能产生异常的代码；catch中的”对Exceptiontype的处理“的作用是捕捉并处理已产生的异常类型相匹配的异常对象 e；</p>
</blockquote>
<p>如果在  try 语句块中的任何代码抛出一个在 catch 子句中说明的异常类，那么</p>
<p>1）程序将跳过 <code>try</code> 语句块的其余代码</p>
<p>2）程序将执行 <code>catch</code> 子句中的处理器代码</p>
<p>把可能产生异常的代码放在 try 中，把处理异常对象 e 的代码放在catch中；如果使用了多少catch代码块，则catch代码块中的异常类顺序是 **先子类后父类 **。</p>
<ul>
<li><strong>printStackTrace()</strong> 方法：输出异常信息</li>
<li><strong>getMessage()</strong> 方法：获取有关异常事件的信息</li>
<li><strong>toString()</strong> 方法：获取异常的类型与性质</li>
</ul>
<h3 id="finally-子句"><a class="markdownIt-Anchor" href="#finally-子句"></a> finally 子句</h3>
<p><code>finally</code> 中的”代码块“是异常处理过程中最后被执行的部分，无论程序是否产生异常，<code>finally</code> 中的代码块都将被执行。实际应用中，<code>finally</code> 中通常放置一些释放资源、关闭对象的代码。完整的异常处理语句应该包括 <code>finally</code> 代码块，无论程序中有无异常产生，<code>finally</code> 代码块中的代码都会被执行。</p>
<p>在以下三种特殊情况下，<code>finally</code> 块不会被执行：</p>
<ul>
<li>[x] 在finally代码块中产生了异常</li>
<li>[x] 在前面的代码中使用了System.exit() 退出程序</li>
<li>[x] 程序所在的线程死亡</li>
</ul>
<h3 id="带资源的-try-语句"><a class="markdownIt-Anchor" href="#带资源的-try-语句"></a> 带资源的 try 语句</h3>
<p>带资源的 try 语句（try-with-resourse)的形似：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(Resourse res=...)</span><br><span class="line">&#123;</span><br><span class="line">    work with res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*以下是一个典型例子，读取一个文件的所有单词*/</span></span><br><span class="line"><span class="keyword">try</span>(<span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/usr/share/dict/words&quot;</span>)):</span><br><span class="line">   <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="string">&quot;out.txt&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(in.hasNext())</span><br><span class="line">        out.println(in.next().toUpperCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个块正常退出时，或者存在一个异常时，都会调用 in.close() 方法，就好像使用了 finally块一样。只要需要关闭资源，就要尽可能使用带资源的 try 语句。</p>
<h3 id="分析堆栈跟踪元素"><a class="markdownIt-Anchor" href="#分析堆栈跟踪元素"></a> 分析堆栈跟踪元素</h3>
<p><strong>堆栈跟踪</strong>（stack trace）是一个方法调用过程的列表，它包含了程序执行过程中方法调用的特定位置。使用getStackTrace() 方法可以得到 StackTraceElement 对象的一个数组</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Throwable</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Throwable</span>();</span><br><span class="line">StackTraceElement[] frames = t.getStackTrace();</span><br><span class="line"><span class="keyword">for</span>(StackTraceElement frame:frames)</span><br><span class="line">    analyze frame</span><br></pre></td></tr></table></figure>
<p>getStackTrace() 类含有能够获得文件名和当前执行的代码行号的方法</p>
<h1 id="泛型程序设计"><a class="markdownIt-Anchor" href="#泛型程序设计"></a> 泛型程序设计</h1>
<p>Java中的参数化类型别称之为泛型。</p>
<p><strong>泛型程序设计</strong>意味着编写的代码可以被很多不同的类型的对象所用。</p>
<h2 id="定义泛型类"><a class="markdownIt-Anchor" href="#定义泛型类"></a> 定义泛型类</h2>
<p>一个泛型类就是具有一个或多个类型变量的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Pair类*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> T first;</span><br><span class="line">    <span class="keyword">private</span> T second;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">()</span>&#123; first = <span class="literal">null</span>; second = <span class="literal">null</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(T first, T second)</span>&#123; <span class="built_in">this</span>.first=first; <span class="built_in">this</span>.second = second;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getFirst</span><span class="params">()</span>&#123; <span class="keyword">return</span> first;&#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getSecond</span><span class="params">()</span>&#123; <span class="keyword">return</span> second;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirst</span><span class="params">(T newValue)</span>&#123; first = newValue;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSecond</span><span class="params">(T newValue)</span>&#123; second = newValue;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，T代表一个类型变量，用尖括号（&lt; &gt;）括起来，放在类的后面。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T,U&gt;&#123; ... &#125;	<span class="comment">//定义多个类型变量</span></span><br></pre></td></tr></table></figure>
<p>类定义中的类型变量指定方法的返回类型以及域和局部变量的类型。</p>
<h2 id="泛型方法"><a class="markdownIt-Anchor" href="#泛型方法"></a> 泛型方法</h2>
<p>定义一个带有类型参数的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayAlg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getMiddle</span><span class="params">(T... a)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a[a.length/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>泛型方法可以定义在普通类中，也可以定义在泛型类中。</p>
<p>调用一个泛型方法时，在方法名前的尖括号中放入具体的类型：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">middle</span> <span class="operator">=</span> ArrayAlg.&lt;String&gt;getMiddle(<span class="string">&quot;John&quot;</span>,<span class="string">&quot;Q.&quot;</span>,<span class="string">&quot;Public&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="类型变量的限定"><a class="markdownIt-Anchor" href="#类型变量的限定"></a> 类型变量的限定</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayAlg</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">min</span><span class="params">(T[] a)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="literal">null</span> || a.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">T</span> <span class="variable">smallest</span> <span class="operator">=</span> a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;a.length;i++)</span><br><span class="line">            <span class="keyword">if</span>(smallest.compareTo(a[i])&gt;<span class="number">0</span>)	smallest = a[i];</span><br><span class="line">        <span class="keyword">return</span> smallest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将T限制为实现了 Comparable 接口的类，可以通过对类型变量T设置 <code>限定</code>（bound）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Comparable</span>&gt; T <span class="title function_">min</span><span class="params">(T[] a)</span> ...</span><br></pre></td></tr></table></figure>
<p>一个类型变量或通配符可以有多个限定</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T <span class="keyword">extends</span> <span class="title class_">Comparable</span> &amp; Serializable</span><br></pre></td></tr></table></figure>
<h2 id="泛型代码和虚拟机"><a class="markdownIt-Anchor" href="#泛型代码和虚拟机"></a> 泛型代码和虚拟机</h2>
<p>虚拟机没有泛型类型对象——所有对象都属于普通类。无论何时定义一个泛型类型，都自动提供了一个相应的原始类型（ raw type）。原始类型的名字就是删去类型参数后的泛型类型名。擦除（erased）类型变量，并替换为限定类型（无限定的变量用 Object）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*Pair类的原始类型*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Object first;		<span class="comment">//因为T是一个无限定的变量，所以直接用Object替换</span></span><br><span class="line">    <span class="keyword">private</span> Object second;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">()</span>&#123; first = <span class="literal">null</span>; second = <span class="literal">null</span>;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">(Object first, Object second)</span>&#123; <span class="built_in">this</span>.first=first; <span class="built_in">this</span>.second = second;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getFirst</span><span class="params">()</span>&#123; <span class="keyword">return</span> first;&#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getSecond</span><span class="params">()</span>&#123; <span class="keyword">return</span> second;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirst</span><span class="params">(Object newValue)</span>&#123; first = newValue;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSecond</span><span class="params">(Object newValue)</span>&#123; second = newValue;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="翻译泛型表达式"><a class="markdownIt-Anchor" href="#翻译泛型表达式"></a> 翻译泛型表达式</h3>
<p>当程序调用泛型方法时，如果擦除返回类型，编译器插入强制类型转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pair&lt;Employee&gt; buddies = ...;</span><br><span class="line"><span class="type">Employee</span> <span class="variable">buddy</span> <span class="operator">=</span> buddies.getFirst();</span><br></pre></td></tr></table></figure>
<p>擦除 getFirst 的返回类型将返回Object 类型。编译器自动插入Employee的强制类型转换，编译器把这个方法调用翻译为两条虚拟机指令：</p>
<ul>
<li>对原始方法 Pair.getFirst 的调用</li>
<li>将返回的 Object 类型强制类型转换为 Employee 类型</li>
</ul>
<h3 id="翻译泛型方法"><a class="markdownIt-Anchor" href="#翻译泛型方法"></a> 翻译泛型方法</h3>
<p>java泛型转换的事实：</p>
<ul>
<li>虚拟机中没有泛型，只有普通的类和方法、</li>
<li>所有的类型参数都用他们的限定类型替换</li>
<li>桥方法被合成来保持多态</li>
<li>为保持类型安全性，必要时插入类型转换</li>
</ul>
<h2 id="约束与局限性"><a class="markdownIt-Anchor" href="#约束与局限性"></a> 约束与局限性</h2>
<h3 id="不能用基本类型实例化类型参数"><a class="markdownIt-Anchor" href="#不能用基本类型实例化类型参数"></a> 不能用基本类型实例化类型参数</h3>
<p>不能用基本类型实例化类型参数，因此没有 Pair&lt;double&gt;，只有Pair&lt;Double&gt; 。原因是类型擦除，擦除之后，Pair 类含有 Object 类型的域，而 Object 不能存储 <code>double</code> 值。</p>
<h3 id="运行时类型查询只适用于原始类型"><a class="markdownIt-Anchor" href="#运行时类型查询只适用于原始类型"></a> 运行时类型查询只适用于原始类型</h3>
<p>虚拟机中的对象总有一个特定的非泛型类型，因此所有的类型查询只产生原始类型。无论何时使用 **<code>instanceof</code>**及泛型类型的强制转换表达式都会看到一个编译器警告。</p>
<h3 id="不能创建参数化类型的数组"><a class="markdownIt-Anchor" href="#不能创建参数化类型的数组"></a> 不能创建参数化类型的数组</h3>
<p>不能实例化参数化类型的数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pair&lt;String&gt;[] table = <span class="keyword">new</span> <span class="title class_">Pair</span>&lt;String&gt;[<span class="number">10</span>];   <span class="comment">//错误使用</span></span><br></pre></td></tr></table></figure>
<p>只是不允许创建这些数组，而声明类型为 <code>Pair\&lt;String\&gt;[]</code> 的变量仍是合法的，不过不能 <code>Pair\&lt;String\&gt;[10]</code> 初始化这个变量。</p>
<h3 id="不能实例化类型变量"><a class="markdownIt-Anchor" href="#不能实例化类型变量"></a> 不能实例化类型变量</h3>
<p>不能使用像 <code>new T(...)</code> ，<code>new T[...]</code> 或 <code>T.class</code> 这样的表达式中的类型变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Pair</span><span class="params">()</span> &#123; first = <span class="keyword">new</span> <span class="title class_">T</span>(); second = <span class="keyword">new</span> <span class="title class_">T</span>();&#125;</span><br></pre></td></tr></table></figure>
<h3 id="泛型类的静态上下文中类型变量无效"><a class="markdownIt-Anchor" href="#泛型类的静态上下文中类型变量无效"></a> 泛型类的静态上下文中类型变量无效</h3>
<p>不能在静态域或方法中引用类型变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> T singleInstance;	<span class="comment">//错误使用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T getSingleInstance	<span class="comment">//错误使用</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(singleInstance == <span class="literal">null</span>) <span class="keyword">return</span> singleInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="集合"><a class="markdownIt-Anchor" href="#集合"></a> 集合</h1>
<p>java.util 包中的集合类就像一个装有多个对象的容器，提到容器 就不难想到数组，数组与集合的不同之处在于：</p>
<p><strong>数组的长度是固定的，集合的长度是可变的；数组既可以存放基本数据类型的数据，又可以存放对象，集合只能存放对象</strong>。集合类包括<strong>List</strong>集合，<strong>Set</strong>集合和<strong>Map</strong>集合，其中List与Set继承了Collection接口</p>
<p><img src="D:%5CStudy%5CJava%E7%9F%A5%E8%AF%86%5Cmarkdown%E7%AC%94%E8%AE%B0%E5%9B%BE%E7%89%87%5C%E9%9B%86%E5%90%88%E7%B1%BB.png" alt="" /></p>
<ul>
<li>Collection接口的常用方法</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>功能描述</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>add(Object e)</td>
<td>将指定的对象添加到当前集合内</td>
<td></td>
</tr>
<tr>
<td>remove(Object o)</td>
<td>将指定的对象从到当前集合内移除</td>
<td></td>
</tr>
<tr>
<td>isEmpty()</td>
<td>返回boolean值，用于判断当前集合是否为空</td>
<td></td>
</tr>
<tr>
<td>iterator()</td>
<td>返回用于遍历集合内元素的迭代器</td>
<td></td>
</tr>
<tr>
<td>size()</td>
<td>返回int型值，获取当前集合中元素的个数</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="list-集合"><a class="markdownIt-Anchor" href="#list-集合"></a> List 集合</h2>
<p>List集合中的元素允许重复，且各元素的顺序就是添加元素的顺序。</p>
<h3 id="list-接口"><a class="markdownIt-Anchor" href="#list-接口"></a> List 接口</h3>
<p>List接口继承了Collection接口，因此可以使用Collection接口中的所有方法。此外，List接口还定义了两个非常重要的方法</p>
<ul>
<li>get(int index)：获得指定索引位置上的元素</li>
<li>set(int  index,Object obj)：将集合中指定索引位置的对象修改为指定的对象</li>
</ul>
<h3 id="list接口的实现类"><a class="markdownIt-Anchor" href="#list接口的实现类"></a> List接口的实现类</h3>
<p>因为List接口不能被直接实例化，所以Java提供了List接口的实现类，其中最常用的实现类是 <strong>ArrayList</strong> 类与**LinkedList **类。</p>
<ul>
<li>[x] <strong>ArrayList</strong>以数组的形式保存集合中的元素，能够根据索引位置随机且快速地访问集合中元素</li>
<li>[x] **LinkedList **以链表结构保存集合中的元素，随机访问集合中的元素性能较差，但向集合中插入素和删除元素的性能出色</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();    <span class="comment">//E代表元素类型，如果集合中的元素为字符串类型，则E即为String</span></span><br><span class="line">List&lt;E&gt; list2 = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>
<ul>
<li>与数组相同，集合的索引也是从 0 开始</li>
</ul>
<h3 id="iterator-迭代器"><a class="markdownIt-Anchor" href="#iterator-迭代器"></a> Iterator 迭代器</h3>
<p>iterator迭代器的常用方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>hasNext()</td>
<td>如果仍有元素可以迭代，则返回true</td>
</tr>
<tr>
<td>next()</td>
<td>返回迭代的下一个元素，返回类型是Object</td>
</tr>
<tr>
<td>remove()</td>
<td>从迭代器指向的Colletion中移除迭代器返回的最后一个元素</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Collection&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="set-集合"><a class="markdownIt-Anchor" href="#set-集合"></a> Set 集合</h2>
<p><strong>Set</strong> 集合中的元素不按特定的方式排序，只是简单地存放在集合中，但 <strong>Set</strong> 集合中的<strong>元素不能重复</strong></p>
<h3 id="set-接口"><a class="markdownIt-Anchor" href="#set-接口"></a> Set 接口</h3>
<p>Set 接口继承了Collection接口，因此可以使用Collection接口中的所有方法。</p>
<p>由于Set集合中的元素不能重复，因此在向Set集合中添加元素时，需要先判断新增元素是否已经存在集合中，再确定是否执行添加操作。</p>
<h3 id="set-接口的实现类"><a class="markdownIt-Anchor" href="#set-接口的实现类"></a> Set 接口的实现类</h3>
<p>Set接口的实现类有<strong>HashSet</strong> 类和 <strong>TreeSet</strong> 类</p>
<ul>
<li>[x] <strong>HashSet</strong>是Set接口的一个实现类，它不允许有重复元素</li>
<li>[x] <strong>TreeSet</strong>不仅实现了Set接口，还实现了 <strong>java.util.ShortedSet</strong> 接口，因此在遍历使用TreeSet类实现的Set集合中的元素时，会默认将元素<strong>按升序排列</strong>。在创建TreeSet对象时，通过使用 <strong>Comparator</strong> 接口，还可以实现制定排序，例如降序排序</li>
</ul>
<ul>
<li><strong>Comparator</strong> 接口，即“比较器”，它提供一个抽象方法compara(T  o1, T  o2)，这个方法指定了两个对象的比较规则，如果o1大于o2，返回正数；如果o1等于o2，返回 0；否则返回负数（通常为-1）</li>
</ul>
<p>TreeSet类增加的方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>first()</td>
<td>返回Set中当前的第一个元素</td>
</tr>
<tr>
<td>last()</td>
<td>返回Set中当前的最后一个元素</td>
</tr>
<tr>
<td>comparator()</td>
<td>返回对此Set中的元素进行排序的比较器，如果此Set使用自然顺序，则返回null</td>
</tr>
<tr>
<td>headSet(E toElement)</td>
<td>返回一个新的Set集合，新集合是toElement(不包括)之前的所有对象</td>
</tr>
<tr>
<td>subSet(E fromElement, E toElement)</td>
<td>返回一个新的Set集合，新集合是fromElement(包括)对像与toElement(不包括)之间的所有对象</td>
</tr>
<tr>
<td>tailSet(E fromElement)</td>
<td>返回一个新的Set集合，新集合包含fromElement(包括)对像之后的所有对象</td>
</tr>
</tbody>
</table>
<h2 id="map-映射"><a class="markdownIt-Anchor" href="#map-映射"></a> Map 映射</h2>
<p>在程序中，如果想要存储具有<strong>映射关系</strong>的数据，就需要使用Map映射</p>
<h3 id="map-接口"><a class="markdownIt-Anchor" href="#map-接口"></a> Map 接口</h3>
<p>Map接口虽然没有继承Collection接口，但提供了key到value的映射关系。Map接口中<strong>不能包含相同的 key ，并且每个 key 只能映射一个 value</strong></p>
<table>
<thead>
<tr>
<th>方法</th>
<th>功能描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>put(Object key,Object value)</td>
<td>向集合中添加指定的key与value的映射关系</td>
</tr>
<tr>
<td>containsKey(Object key)</td>
<td>如果此映射包含指定key的映射关系，则返回true</td>
</tr>
<tr>
<td>containsValue(Object value)</td>
<td>如果此映射将一个或多个key映射到指定值，则返回true</td>
</tr>
<tr>
<td>get(Object key)</td>
<td>如果存在指定的key对象，则返回该对象对应的值，否则返回null</td>
</tr>
<tr>
<td><strong>getOrDefault(Object key,V defaultValue)</strong></td>
<td><strong>获得与键值；如果未在映射中找到该键值，返回defaultValue</strong></td>
</tr>
<tr>
<td>keySet()</td>
<td>返回该集合中的所有key对象形成的 <strong>Set</strong> 集合</td>
</tr>
<tr>
<td>values()</td>
<td>返回该集合中所有值对象形成的 <strong>Collection</strong> 集合</td>
</tr>
</tbody>
</table>
<h3 id="map-接口的实现类"><a class="markdownIt-Anchor" href="#map-接口的实现类"></a> Map 接口的实现类</h3>
<p>Map接口常用的实现类有 <strong>HashMap</strong> 和 <strong>TreeMap</strong> 两种</p>
<ul>
<li>[x] <strong>HashMap</strong> 类虽然能够通过哈希表快速查找其内部的映射关系，但不保证映射的顺序。在key-value键值对中，由于key不能重复，所以最多只有一个key为null，但可以有无数多个value为null</li>
<li>[x] <strong>TreeMap</strong> 类不仅实现了Map接口，还实现了java.util.ShrotMap接口。由于使用TreeMap类实现的Map集合存储key-value键值对时，需要根据key进行排序，所以key不能为null</li>
</ul>
<h2 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h2>
<h3 id="集合与数组的转换"><a class="markdownIt-Anchor" href="#集合与数组的转换"></a> 集合与数组的转换</h3>
<p>将一个数组转换为集合，Arrays.asList包装器就可以实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] nums = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;(Arrays.asList(nums));</span><br><span class="line">list.add(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<p>将一个集合转换为数组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="number">1</span>);</span><br><span class="line">list.add(<span class="number">2</span>);</span><br><span class="line">list.add(<span class="number">3</span>);</span><br><span class="line">Integer[] nums = list.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[list.size()]);</span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br></pre></td></tr></table></figure>
<h1 id="并发"><a class="markdownIt-Anchor" href="#并发"></a> 并发</h1>
<p>多线程与多进程的区别：进程是指一个内存中运行的应用程序，每个进程都有自己独立的地址空间(内存空间),用户每启动一个进程，操作系统就会为该进程分配一个独立的内存空间。一个进程可以启动多个线程。线程是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一 点在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。本质的区别在于每个进程拥有自己的一整套变量，而线程则共享数据。与进程相比较，线程更 “轻量级” ，创建，撤销一个线程比启动新进程的开销要小得多。</p>
<h2 id="线程"><a class="markdownIt-Anchor" href="#线程"></a> 线程</h2>
<p>Java的线程是通过 <code>java.lang.Thread</code> 类或者 <code>java.lang.Runnable</code> 接口编写代码来定义、实例化和启动的。Thread类实例只是一个对象，跟其他任何对象一样，具有成员变量和方法，且都储存在堆上。由于Java应用总是从main()方法开始运行，JVM启动时会有一个由主方法所定义的线程，称之为主线程。每个线程都是通过某个特定的Thread对象所对应的方法run()来完成其操作，方法run()称之为线程的线程体，<strong>Thread类必须以start()方法来启动一个线程</strong>，如直接通过run()方法来执行只是一个方法的调用，并不是一个线程的启动。在执行start()方法之前，Thread对象只是一个实例，并不是一个真正的线程。</p>
<h3 id="两种实现方式"><a class="markdownIt-Anchor" href="#两种实现方式"></a> 两种实现方式</h3>
<ol>
<li>继承 <code>Thread</code> 类并重写 <code>run</code> 方法。</li>
<li>实现 <code>runable</code> 接口并重写 <code>run</code> 方法。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以实现runable接口方式为例</span></span><br><span class="line"><span class="comment">// 用lambda表达式创建一个runable实例</span></span><br><span class="line"><span class="type">Runable</span> <span class="variable">r</span> <span class="operator">=</span> () -&gt;&#123;   </span><br><span class="line">    task code</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 由runable创建一个Thread对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r);</span><br><span class="line"><span class="comment">// 启动线程</span></span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure>
<h2 id="线程状态"><a class="markdownIt-Anchor" href="#线程状态"></a> 线程状态</h2>
<p>线程可以有如下6种状态：</p>
<ul>
<li>New（新创建）</li>
<li>Runable（可运行）</li>
<li>Blocked（被阻塞）</li>
<li>Waiting（等待）</li>
<li>Timed waiting（计时等待）</li>
<li>Terminated（被终止）</li>
</ul>
<p>可调用 <code>getState</code> 方法确定当前线程的状态。</p>
<h3 id="新创建线程"><a class="markdownIt-Anchor" href="#新创建线程"></a> 新创建线程</h3>
<p>当用 <code>new</code> 操作符创建一个线程时，如 <code>new Thread(r)</code> ，该线程还没有开始运行，他的状态是new。</p>
<h3 id="可运行状态"><a class="markdownIt-Anchor" href="#可运行状态"></a> 可运行状态</h3>
<p>一旦调用 <code>start</code> 方法，线程处于 runable 状态。一个可运行的线程可能正在运行也可能没有运行，这取决于操作系统给线程提供的运行时间（一个正在运行的线程仍然处于可运行状态）</p>
<h3 id="被阻塞线程和等待线程"><a class="markdownIt-Anchor" href="#被阻塞线程和等待线程"></a> 被阻塞线程和等待线程</h3>
<p>等待更新……</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
</search>
